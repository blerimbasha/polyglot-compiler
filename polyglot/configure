#!/bin/sh

# List of extensions to build.
ext=$*
allext=`/bin/ls -1d polyglot/ext/*/ExtensionInfo.java | cut -d/ -f3`
allext=`echo $allext`

if [ "$ext" = "" ]
then
  ext=$allext
fi

for e in $ext
do
  if [ ! -f polyglot/ext/$e/ExtensionInfo.java ]
  then
    echo "** Error: $e is not a polyglot extension"
    echo "usage: `basename $0` <extensions>"
    echo "    where <extensions> is a zero or more of:" $allext
    echo "    by default, all extensions are built"
    exit 1
  fi
done

# Ensure dependencies are added
old=""
while [ "$ext" != "$old" ]
do
    old=`echo $ext`
    ext=`for e in $ext; do grep "^$e:" polyglot/ext/Makefile | sed -e 's/://g'; done`
    ext=`for e in $ext; do echo $e | grep -v '^jl$' | grep -v '^FORCE$'; done | sort -u`
    ext=`echo $ext`
done

trap 'rm -f PrintProperty.java PrintProperty.class' 0

find_in_path() {
    #type "$1" 2>&1 | grep -v 'not found' | sed 's/.* is //' | awk '{print $0}'
    OLD_IFS="${IFS}"
    IFS=':'
    (for i in ${PATH} ; do
        if command test -f $i/$1 && command test -x $i/$1 ; then
            echo $i/$1 ;
        fi ;
    done) | head -1
    IFS="${OLD_IFS}"
}

exists() {
    if [ ! "$1" "$2" ]; then
	echo "** Error: $2 not found"
	exit 1
    fi
}

escape() {
    sed -e 's%\\%\\\\%g' -e 's%;%\\;%g' | sed 's% % %g'
}

JAVA=`find_in_path java`
JAVAC=`find_in_path javac`
JAVAH=`find_in_path javah`
JAVADOC=`find_in_path javadoc`
JAR=`find_in_path jar`
RMIC=`find_in_path rmic`

exists -x "${JAVA}"
echo java is "${JAVA}"

exists -x "${JAVAC}"
echo javac is "${JAVAC}"

exists -x "${JAVAH}"
echo javah is "${JAVAH}"

exists -x "${JAVADOC}"
echo javadoc is "${JAVADOC}"

exists -x "${JAR}"
echo jar is "${JAR}"

exists -x "${RMIC}"
echo rmic is "${RMIC}"

if [ ! -d src ] 
then
	exists -f ./java_cup.jar
	echo java_cup.jar is ./java_cup.jar
else
	exists -f ./src/java_cup.jar
	echo java_cup.jar is ./src/java_cup.jar
fi

echo determining some Java properties:

cat > PrintProperty.java <<EOF
public class PrintProperty {
    public static void main(String[] args) {
	if (args.length == 1) System.out.println(System.getProperty(args[0]));
    }
}
EOF

exists -f PrintProperty.java

"${JAVAC}" PrintProperty.java
exists -f PrintProperty.class

JAVA_VER=`"${JAVA}" -cp . PrintProperty java.version | escape`
echo java version is ${JAVA_VER}

PATH_SEP=`"${JAVA}" -cp . PrintProperty path.separator | escape`
echo path separator is ${PATH_SEP}

NOT_ESC_PATH_SEP=`"${JAVA}" -cp . PrintProperty path.separator`
echo unescaped path separator is ${NOT_ESC_PATH_SEP}

FILE_SEP=`"${JAVA}" -cp . PrintProperty file.separator | escape`
echo file separator is ${FILE_SEP}

CWD=`"${JAVA}" -cp . PrintProperty user.dir | escape`
echo current directory is ${CWD}

JAVA_HOME=`"${JAVA}" -cp . PrintProperty java.home | escape`
if [ -f "${JAVA_HOME}/lib/rt.jar" ]; then
    if [ `uname|grep "CYGWIN"` ]; then
    	JAVA_HOME=`cygpath -u "${JAVA_HOME}"`
    fi
    JAVA_HOME=`dirname "${JAVA_HOME}"`
fi
echo Java home directory is ${JAVA_HOME}

ESC_JAVA_HOME=`echo ${JAVA_HOME} | escape`
echo escaped Java home directory is "${ESC_JAVA_HOME}"

TOOLS_JAR="${JAVA_HOME}/lib/tools.jar"
exists -f "${TOOLS_JAR}"
echo tools.jar is "${TOOLS_JAR}"

RT_JAR="${JAVA_HOME}/jre/lib/rt.jar"
exists -f "${RT_JAR}"
echo rt.jar is "${RT_JAR}"

if [ -d "${JAVA_HOME}/include/win32" ]
then
    OS=win32
    LIBPATH="PATH"
elif [ -d "${JAVA_HOME}/include/linux" ]
then
    OS=linux
    LIBPATH="LD_LIBRARY_PATH"
elif [ -d "${JAVA_HOME}/include/solaris" ]
then
    OS=solaris
    LIBPATH="LD_LIBRARY_PATH"
else
    echo Cannot determine operating system.
    exit 1
fi

echo Operating system is ${OS}.

# ESC_TOOLS_JAR="${ESC_JAVA_HOME}${FILE_SEP}lib${FILE_SEP}tools.jar"
# echo escaped tools.jar is "${ESC_TOOLS_JAR}"

TOP=$CWD
if [ ! -d src ]
then
    echo "Top of build tree is $TOP"
    DEFS_MK="Defs.mk"
    src=""
    srcdir="."
else
    echo "Top of build tree is $TOP${FILE_SEP}src"
    DEFS_MK="src${FILE_SEP}Defs.mk"
    if [ $OS = linux ]; then rm -f lib/libfs.solaris.so; fi
    if [ $OS = solaris ]; then mv lib/libfs.solaris.so lib/libfs.so; fi
    src="src/"
    srcdir="src"
fi

echo "Setting up javadoc parameters"

# Get a list of all the packages we're building to feed to javadoc.
source_dirs=""

find ${src}polyglot/ext -name \*.java | sed -e 's%/[^/]*$%%g' | \
    egrep -v '\<tests?\>' | sort -u > /tmp/pkg.$$

for e in jl ${ext}
do
  s=`grep "^${src}polyglot/ext/$e" /tmp/pkg.$$`
  source_dirs="$source_dirs $s"
done

rm -f /tmp/pkg.$$

packages=""
package_dirs="$srcdir"

for dir in $source_dirs
do
  if [ ! -f $dir/Makefile ]
  then
    continue
  fi

  pkg=`awk '/^PACKAGE/ {print $NF}' $dir/Makefile`

  if [ x"$pkg" != x"$dir" -a x"$pkg" != x"=" ]; then
    d=`echo $dir | sed "s%/$pkg\$%%"`
    package_dirs="$package_dirs $d"
  fi

  packages="$packages $pkg"
done

# Eliminate duplicates
package_dirs=`for d in $package_dirs; do echo $d; done | sort -u`

JAVADOC_PACKAGES=`echo $packages | sed 's%/%.%g'`
JAVADOC_SOURCEPATH=`echo $package_dirs | sed "s/ /${PATH_SEP}/g"`

echo creating ${DEFS_MK}

# use jsse.jar only when jdk version number is not 1.4
TMP14=`echo ${JAVA_VER} | grep "1.4"`
if [ -z "$TMP14" ]
then
    JSSE_JAR="\${ESC_SOURCE}${FILE_SEP}jsse.jar"
fi

cat > ${DEFS_MK} << EOF
# DO NOT EDIT - This file was automatically generated by configure.

ESC_SOURCE = \$(subst /,${FILE_SEP},\$(SOURCE))
ESC_BUILDPATH = \$(subst /,${FILE_SEP},\$(BUILDPATH))

EXT = ${ext}

JAVA_HOME = "${JAVA_HOME}"

JC = "${JAVAC}"
JAVA = "${JAVA}"
JAVAH = "${JAVAH}"
RMIC = "${RMIC}"
JAVADOC = "${JAVADOC}"
JAR = "${JAR}"

OS = ${OS}

TOOLS_JAR = ${TOOLS_JAR}
RT_JAR = ${RT_JAR}

JSSE_JAR = ${JSSE_JAR}
JNET_JAR = \$(ESC_SOURCE)${FILE_SEP}jnet.jar
JCERT_JAR = \$(ESC_SOURCE)${FILE_SEP}jcert.jar
CRYPTIX_JAR = \$(ESC_SOURCE)${FILE_SEP}cryptix32.jar

CRYPT_PATH = \$(JSSE_JAR)${NOT_ESC_PATH_SEP}\$(JNET_JAR)${NOT_ESC_PATH_SEP}\$(JCERT_JAR)${NOT_ESC_PATH_SEP}\$(CRYPTIX_JAR)

OUTPUT = \$(ESC_SOURCE)${FILE_SEP}classes

LEX_RUNTIME = \$(ESC_SOURCE)${FILE_SEP}jlex.jar
CUP_RUNTIME = \$(ESC_SOURCE)${FILE_SEP}java_cup.jar
CLASSPATH = "\$(OUTPUT)${NOT_ESC_PATH_SEP}\$(CUP_RUNTIME)${NOT_ESC_PATH_SEP}\$(LEX_RUNTIME)${NOT_ESC_PATH_SEP}\$(CRYPT_PATH)${NOT_ESC_PATH_SEP}\$(RT_JAR)${NOT_ESC_PATH_SEP}\$(TOOLS_JAR)"
JAVAC_PATHS = -classpath \$(CLASSPATH) -sourcepath \$(ESC_BUILDPATH)${PATH_SEP}\$(ESC_SOURCE)

JAVADOC_CLASSPATH = \$(CLASSPATH)

JAVADOC_PACKAGES = ${JAVADOC_PACKAGES}
JAVADOC_SOURCEPATH = ${JAVADOC_SOURCEPATH}
EOF

exists -f ${DEFS_MK}

# Create the bin directory and scripts

if [ -d src ] 
then 
    mkdir src/bin || echo ok
    LOOP="install build"
else
    LOOP="build"
fi

for i in $LOOP
do

if [ $i = build ] 
then 
    JLC_CP="-classpath \${TOP}${FILE_SEP}classes${PATH_SEP}\${TOP}${FILE_SEP}java_cup.jar\${PATH_SEP}."
    if [ -d src ]; then BIN="src/bin"; else BIN="bin"; fi
    if [ -d src ]; then TOP="${CWD}${FILE_SEP}src"; else TOP="$CWD" ; fi
else
    JLC_CP="-classpath \${TOP}${FILE_SEP}lib${FILE_SEP}polyglot.jar${PATH_SEP}\${TOP}${FILE_SEP}lib${FILE_SEP}jif.jar${PATH_SEP}\${TOP}${FILE_SEP}lib${FILE_SEP}java_cup.jar"
    BIN="bin"
    TOP=$CWD
fi

mkdir -p $BIN

echo creating ${BIN}/defs
cat > ${BIN}/defs <<EOF
# DO NOT EDIT - This file was automatically generated by configure.

JAVA='${JAVA}'
FILE_SEP="${FILE_SEP}"
PATH_SEP="${NOT_ESC_PATH_SEP}"
TOP="${TOP}"

EOF

exists -f ${BIN}/defs
chmod a+x ${BIN}/defs

export JAVA
export JAVAC
export JAVAH
export JAVADOC
export JAR
export RMIC
export TOP
export JLC_CP
export BIN
export DEFS_MK
export JSSE_JAR
export JAVA_VER
export PATH_SEP
export NOT_ESC_PATH_SEP
export FILE_SEP
export CWD
export JAVA_HOME
export ESC_JAVA_HOME
export TOOLS_JAR
export RT_JAR
export OS
export LIBPATH

for e in $ext
do
  if [ -f ./configure-$e ]
  then
    echo Configuring $e for $i
    sh ./configure-$e $i
    echo Done configuring $e
  fi
done

done ########## end of loop

echo done
