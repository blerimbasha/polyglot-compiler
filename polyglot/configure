#!/bin/sh

trap 'rm -f PrintProperty.java PrintProperty.class' 0

find_in_path() {
    #type "$1" 2>&1 | grep -v 'not found' | sed 's/.* is //' | awk '{print $0}'
    OLD_IFS="${IFS}"
    IFS=':'
    (for i in ${PATH} ; do
        if command test -f $i/$1 && command test -x $i/$1 ; then
            echo $i/$1 ;
        fi ;
    done) | head -1
    IFS="${OLD_IFS}"
}

exists() {
    if [ ! "$1" "$2" ]; then
	echo "** Error: $2 not found"
	exit 1
    fi
}

escape() {
    sed -e 's%\\%\\\\%g' -e 's%;%\\;%g' | sed 's%%%g'
}

JAVA=`find_in_path java`
JAVAC=`find_in_path javac`
JAVAH=`find_in_path javah`
JAVADOC=`find_in_path javadoc`
JAR=`find_in_path jar`
RMIC=`find_in_path rmic`

exists -x "${JAVA}"
echo java is "${JAVA}"

exists -x "${JAVAC}"
echo javac is "${JAVAC}"

exists -x "${JAVAH}"
echo javah is "${JAVAH}"

exists -x "${JAVADOC}"
echo javadoc is "${JAVADOC}"

exists -x "${JAR}"
echo jar is "${JAR}"

exists -x "${RMIC}"
echo rmic is "${RMIC}"

if [ ! -d src ] 
then
	exists -f ./java_cup.jar
	echo java_cup.jar is ./java_cup.jar

	exists -f ./iDoclet.jar
	echo iDoclet.jar is ./iDoclet.jar
else
	exists -f ./src/java_cup.jar
	echo java_cup.jar is ./src/java_cup.jar

	exists -f ./src/iDoclet.jar
	echo iDoclet.jar is ./src/iDoclet.jar
fi

echo determining some Java properties:

cat > PrintProperty.java <<EOF
public class PrintProperty {
    public static void main(String[] args) {
	if (args.length == 1) System.out.println(System.getProperty(args[0]));
    }
}
EOF

exists -f PrintProperty.java

"${JAVAC}" PrintProperty.java
exists -f PrintProperty.class

PATH_SEP=`"${JAVA}" -cp . PrintProperty path.separator | escape`
echo path separator is ${PATH_SEP}

FILE_SEP=`"${JAVA}" -cp . PrintProperty file.separator | escape`
echo file separator is ${FILE_SEP}

CWD=`"${JAVA}" -cp . PrintProperty user.dir | escape`
echo current directory is ${CWD}

JAVA_HOME=`"${JAVA}" -cp . PrintProperty java.home | escape`
if [ -f "${JAVA_HOME}/lib/rt.jar" ]; then
    JAVA_HOME=`dirname ${JAVA_HOME}`
fi
echo Java home directory is ${JAVA_HOME}

ESC_JAVA_HOME=`echo ${JAVA_HOME} | escape`
echo escaped Java home directory is "${ESC_JAVA_HOME}"

TOOLS_JAR="${JAVA_HOME}/lib/tools.jar"
exists -f "${TOOLS_JAR}"
echo tools.jar is "${TOOLS_JAR}"

RT_JAR="${JAVA_HOME}/jre/lib/rt.jar"
exists -f "${RT_JAR}"
echo rt.jar is "${RT_JAR}"

if [ -d ${JAVA_HOME}/include/win32 ]
then
    OS=win32
    LIBPATH="PATH"
elif [ -d ${JAVA_HOME}/include/linux ]
then
    OS=linux
    LIBPATH="LD_LIBRARY_PATH"
elif [ -d ${JAVA_HOME}/include/solaris ]
then
    OS=solaris
    LIBPATH="LD_LIBRARY_PATH"
else
    echo Cannot determine operating system.
    exit 1
fi

echo Operating system is ${OS}.

# ESC_TOOLS_JAR="${ESC_JAVA_HOME}${FILE_SEP}lib${FILE_SEP}tools.jar"
# echo escaped tools.jar is "${ESC_TOOLS_JAR}"

TOP=$CWD
if [ ! -d src ]
then 
    echo "Top of build tree is $TOP"
    DEFS_MK="Defs.mk"
    JLC_CP="-classpath \${TOP}${FILE_SEP}classes${PATH_SEP}\${TOP}${FILE_SEP}java_cup.jar${PATH_SEP}\${CLASSPATH}"
else
    echo "Top of build tree is $TOP${FILE_SEP}src"
    DEFS_MK="src${FILE_SEP}Defs.mk"
    JLC_CP="-classpath \${TOP}${FILE_SEP}lib${FILE_SEP}jltools.jar${PATH_SEP}\${TOP}${FILE_SEP}lib${FILE_SEP}jif.jar${PATH_SEP}\${TOP}${FILE_SEP}lib${FILE_SEP}java_cup.jar${PATH_SEP}\${CLASSPATH}"
    if [ $OS = linux ]; then rm -f lib/libfs.solaris.so; fi
    if [ $OS = solaris ]; then mv lib/libfs.solaris.so lib/libfs.so; fi
fi

echo creating ${DEFS_MK}

cat > ${DEFS_MK} << EOF
# DO NOT EDIT - This file was automatically generated by configure.

ESC_SOURCE = \$(subst /,${FILE_SEP},\$(SOURCE))
ESC_BUILDPATH = \$(subst /,${FILE_SEP},\$(BUILDPATH))

JAVA_HOME = ${JAVA_HOME}

JC = ${JAVAC}
JAVA = ${JAVA}
JAVAH = ${JAVAH}
RMIC = ${RMIC}
JAVADOC = ${JAVADOC}
JAR = ${JAR}

OS = ${OS}

TOOLS_JAR = ${TOOLS_JAR}
RT_JAR = ${RT_JAR}

JSSE_JAR = \$(ESC_SOURCE)${FILE_SEP}jsse.jar
JNET_JAR = \$(ESC_SOURCE)${FILE_SEP}jnet.jar
JCERT_JAR = \$(ESC_SOURCE)${FILE_SEP}jcert.jar
CRYPTIX_JAR = \$(ESC_SOURCE)${FILE_SEP}cryptix32.jar
IDOCLET_JAR = \$(ESC_SOURCE)${FILE_SEP}iDoclet.jar

CRYPT_PATH = \$(JSSE_JAR)${PATH_SEP}\$(JNET_JAR)${PATH_SEP}\$(JCERT_JAR)${PATH_SEP}\$(CRYPTIX_JAR)

OUTPUT = \$(ESC_SOURCE)${FILE_SEP}classes

LEX_RUNTIME = \$(ESC_SOURCE)${FILE_SEP}jlex.jar
CUP_RUNTIME = \$(ESC_SOURCE)${FILE_SEP}java_cup.jar
CLASSPATH = \$(OUTPUT)${PATH_SEP}\$(CUP_RUNTIME)${PATH_SEP}\$(LEX_RUNTIME)${PATH_SEP}\$(CRYPT_PATH)${PATH_SEP}\$(RT_JAR)${PATH_SEP}\$(TOOLS_JAR)
JAVAC_PATHS = -classpath \$(CLASSPATH) -sourcepath \$(ESC_BUILDPATH)${PATH_SEP}\$(ESC_SOURCE)

JAVADOC_CLASSPATH = \$(IDOCLET_JAR)${PATH_SEP}\$(CLASSPATH)
EOF

exists -f ${DEFS_MK}

# Create the bin directory and scripts

if [ -d src ] 
then 
    mkdir src/bin || echo ok
    LOOP="install build"
else
    LOOP="build"
fi

for i in $LOOP
do

if [ $i = build ] 
then 
    JLC_CP="-classpath \${TOP}${FILE_SEP}classes${PATH_SEP}\${TOP}${FILE_SEP}java_cup.jar\${PATH_SEP}."
    if [ -d src ]; then BIN="src/bin"; else BIN="bin"; fi
    if [ -d src ]; then TOP="${CWD}${FILE_SEP}src"; else TOP="$CWD" ; fi
else
    JLC_CP="-classpath \${TOP}${FILE_SEP}lib${FILE_SEP}jltools.jar${PATH_SEP}\${TOP}${FILE_SEP}lib${FILE_SEP}jif.jar${PATH_SEP}\${TOP}${FILE_SEP}lib${FILE_SEP}java_cup.jar"
    BIN="bin"
    TOP=$CWD
fi

mkdir -p $BIN

echo creating ${BIN}/jlc

R="\${JAVA} ${JLC_CP} jltools.main.Main \$@"

cat > ${BIN}/jlc <<EOF
#!/bin/sh
# DO NOT EDIT - This file was automatically generated by configure.

case "\$1" in
  -v) verbose=1; shift;;
esac

JAVA='${JAVA}'
FILE_SEP="${FILE_SEP}"
PATH_SEP="${PATH_SEP}"
TOP="${TOP}"

if test ! -z "\$verbose"
then
  echo $R
fi

$R
EOF

exists -f ${BIN}/jlc
chmod a+x ${BIN}/jlc

echo creating $BIN/jifc
cat > ${BIN}/jifc <<EOF
#!/bin/sh
${TOP}/bin/jlc -ext jif \$*
EOF
exists -f ${BIN}/jifc
chmod a+x ${BIN}/jifc

echo creating ${BIN}/localusers

cat > ${BIN}/localusers <<EOF
#!/bin/sh
# DO NOT EDIT - This file was automatically generated by configure.

JAVA='${JAVA}'
TOP="${TOP}"

if [ \$# -ne 1 ]
then 
	echo usage: \$0 principal-dir
	exit 1
fi

if [ ! -d \$1 ] 
then
	echo Error: \$1 is not a valid directory.
	exit 1
fi

${LIBPATH}=\$TOP${FILE_SEP}lib${PATH_SEP}\$${LIBPATH}
export ${LIBPATH}

\$JAVA ${JLC_CP} -Dprincipal.path=\$1 jif.policy.Passwd 
EOF
exists -f ${BIN}/localusers
chmod a+x ${BIN}/localusers

if [ $i = install ]
then
PRINCIPAL_PATH="${TOP}${FILE_SEP}users"

mkdir -p ${PRINCIPAL_PATH}

#creating bin/sampleusers
echo creating ${BIN}/sampleusers
cat > ${BIN}/sampleusers <<EOF
#!/bin/sh
# DO NOT EDIT - This file was automatically generated by configure.

JAVAC='${JAVAC}'
TOP="${TOP}"

\$JAVAC ${JLC_CP} -d \$1 \${TOP}${FILE_SEP}demo${FILE_SEP}jif${FILE_SEP}principal${FILE_SEP}*.java
EOF
exists -f ${BIN}/sampleusers
chmod a+x ${BIN}/sampleusers

#creating bin/jif (the running script)
echo creating ${BIN}/jif
cat > ${BIN}/jif <<EOF
#!/bin/sh
# DO NOT EDIT - This file was automatically generated by configure.

JAVA='${JAVA}'
TOP="${TOP}"
PRINCIPAL_PATH="${PRINCIPAL_PATH}"

args=""
JIFCP="${JLC_CP}${PATH_SEP}\${PRINCIPAL_PATH}"
DEFCP=false
for arg in "\$@"; do
    if [ \${arg} = "-classpath" ]; then
    	DEFCP=true
    else 
    	if [ \${DEFCP} = "true" ]; then
	    JIFCP=\${JIFCP}${PATH_SEP}\${arg}
	    DEFCP=done
	else
	    args="\${args} \${arg}"
	fi
    fi	
done

if [ \${DEFCP} = "false" ]; then
    JIFCP=\${JIFCP}${PATH_SEP}\${CLASSPATH}
fi

${LIBPATH}=\$TOP${FILE_SEP}lib${PATH_SEP}\$${LIBPATH}
export ${LIBPATH}

\${JAVA} \${JIFCP} \${args}

EOF
exists -f ${BIN}/jif
chmod a+x ${BIN}/jif

#create principals
${TOP}/bin/localusers ${PRINCIPAL_PATH}
${TOP}/bin/sampleusers ${PRINCIPAL_PATH}

fi

done ########## end of loop

echo done
