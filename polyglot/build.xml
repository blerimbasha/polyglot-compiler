<project name="polyglot" default="base" basedir=".">
	<description>
    Polyglot build file
  </description>

	<!-- set global properties for this build -->

	<!-- source directory -->
	<property name="src" location="${basedir}/src"/>

	<!-- directory for class file targets -->
	<property name="classes" location="${basedir}/classes"/>

	<!-- directory for jar files -->
	<property name="lib" location="${basedir}/lib"/>

	<!-- binaries directory -->
	<property name="bin"  location="${basedir}/bin"/>

	<!-- tools directory -->
	<property name="tools.dir" location="${basedir}/tools"/>

	<!-- pth (Polyglot Test Harness) directory -->
	<property name="pth.dir"  location="${tools.dir}/pth"/>
	<property name="pth.classes"  location="${pth.dir}/classes"/>
	<property name="pth.src"  location="${pth.dir}/src"/>

	<!-- ppg (Polyglot Parser Generator) directory -->
	<property name="ppg.dir"  location="${tools.dir}/ppg"/>
	<property name="ppg.classes"  location="${ppg.dir}/classes"/>
	<property name="ppg.src"  location="${ppg.dir}/src"/>

	<!-- java_cup directory -->
	<property name="cup.dir"  location="${tools.dir}/java_cup"/>
	<property name="cup.classes" location="${cup.dir}/classes"/>
	<property name="cup.src" location="${cup.dir}/src"/>

	<!-- examples directory -->
	<property name="examples.dir" location="${basedir}/examples" />
	<property name="pao.dir" location="${examples.dir}/pao"/>
	<property name="coffer.dir" location="${examples.dir}/coffer"/>

	<!-- temporary directory -->
	<property name="tmp" location="${basedir}/tmp" />

	<!-- classpath to use when compiling polyglot -->
	<path id="standard.classpath">
		<pathelement location="${classes}"/>
		<pathelement location="${lib}/java_cup.jar"/>
		<pathelement location="${lib}/JFlex.jar"/>
		<pathelement location="${lib}/ppg.jar"/>
	</path>

	<!-- classpath to use when bootstrapping java_cup.jar -->
	<path id="cup.jar.classpath">
		<pathelement location="${cup.dir}/lib/java_cup.jar"/>
	</path>

	<target name="configure-version" unless="jl.version">
		<property file="${basedir}/build.properties" prefix="jl" />
		<property name="jl.version" value="${jl.version.major}.${jl.version.minor}.${jl.version.patch}"/>
	</target>

	<target name="configure-buildstring" depends="configure-version" unless="jl.version.build">
		<tstamp>
			<format property="now" pattern="yyyy-MM-dd HH:mm:ss" />
		</tstamp>
		<property name="jl.version.build" value="${jl.version} (${now})"/>
	</target>

	<target name="configure" description="Configures Polyglot"
          depends="check-jars,configure-version"
          unless="configure.up-to-date">
		<echo message="java version is ${java.version}"/>
		<echo message="current directory is ${user.dir}"/>
		<echo message="Java home directory is ${java.home}"/>
		<echo message="Polyglot version is ${jl.version}"/>
		<property name="configure.up-to-date" value="true"/>
	</target>

	<target name="check-jars">
		<available file="${cup.dir}/lib/java_cup.jar" property="cup.jar.exists" />
		<available file="${lib}/JFlex.jar" property="jflex.jar.exists" />
		<fail unless="cup.jar.exists" message="${cup.dir}/lib/java_cup.jar not found." />
		<fail unless="jflex.jar.exists" message="${lib}/JFlex.jar not found." />
	</target>

	<!-- create appropriate executables in the bin directory -->
	<target name="bin" depends="configure" unless="bin.up-to-date">
		<chmod perm="+x" file="${bin}/jlc"/>
		<chmod perm="+x" file="${bin}/pth"/>
	</target>

	<!-- initialize the build -->
	<target name="init" depends="configure">
		<!-- Create the time stamp -->
		<tstamp/>
		<!-- Create the build directory structure used by compile -->
		<mkdir dir="${classes}"/>
		<mkdir dir="${cup.classes}"/>
		<mkdir dir="${ppg.classes}"/>
		<mkdir dir="${pth.classes}"/>
	</target>

	<!-- build everything -->
	<target name="all" depends="jar-all" description="Build everything"/>

	<!-- build the base compiler -->
	<target name="base" depends="bin,base-parser,compile-base,base-qq"/>

	<!-- compile everything -->
	<target name="compile-all" depends="compile-base,compile-ppg,compile-pth,compile-examples" description="Compile everything"/>

	<!-- build all the jars -->
	<target name="jar-all" depends="jar,jar-pth,jar-ppg,jar-examples"/>

	<!-- install the jars in the examples -->
	<target name="install-jars" depends="jar">
		<copy file="${lib}/polyglot.jar" todir="${pao.dir}/lib" />
		<copy file="${lib}/polyglot.jar" todir="${coffer.dir}/lib" />
	</target>

	<!-- build the examples -->
	<target name="examples" depends="compile-examples"/>
	<target name="compile-examples" depends="pao,coffer"/>

	<target name="pao" depends="install-jars">
		<ant inheritAll="false" antfile="${pao.dir}/build.xml" dir="${pao.dir}" target="compile-all"/>
	</target>

	<target name="coffer" depends="install-jars">
		<ant inheritAll="false" antfile="${coffer.dir}/build.xml" dir="${coffer.dir}" target="compile-base.all"/>
	</target>

	<!-- clean the examples -->
	<target name="clean-examples">
		<ant inheritAll="false" antfile="${pao.dir}/build.xml" dir="${pao.dir}" target="clean"/>
		<ant inheritAll="false" antfile="${coffer.dir}/build.xml" dir="${coffer.dir}" target="clean"/>
	</target>

	<!-- clobber the examples -->
	<target name="clobber-examples">
		<ant inheritAll="false" antfile="${pao.dir}/build.xml" dir="${pao.dir}" target="clobber"/>
		<ant inheritAll="false" antfile="${coffer.dir}/build.xml" dir="${coffer.dir}" target="clobber"/>
	</target>

	<!-- jar the examples -->
	<target name="jar-examples">
		<ant inheritAll="false" antfile="${pao.dir}/build.xml" dir="${pao.dir}" target="jar"/>
		<ant inheritAll="false" antfile="${coffer.dir}/build.xml" dir="${coffer.dir}" target="jar"/>
	</target>

	<target name="clean-all" depends="clean,clean-examples"/>
	<target name="clobber-all" depends="clobber,clobber-examples" />

	<target name="dust" depends="clobber-all">
		<delete file="${lib}/polyglot.jar"/>
		<delete file="${lib}/java_cup.jar"/>
		<delete file="${lib}/ppg.jar"/>
		<delete file="${lib}/pth.jar"/>
	</target>

	<target name="clean"
  	      description="Cleans up the directory tree: deletes the distribution directory and the classes directories">
		<!-- Delete the ${classes} and ${dist} directory trees -->
                <delete dir="${lib}/polyglot.jar"/>
		<delete dir="${classes}" includeemptydirs="true" failonerror="false" />
		<delete dir="${pth.classes}" includeemptydirs="true" failonerror="false" />
		<delete dir="${ppg.classes}" includeemptydirs="true" failonerror="false" />
		<delete dir="${cup.classes}" includeemptydirs="true" failonerror="false" />
		<delete dir="${tmp}" includeemptydirs="true" failonerror="false" />
		<delete dir="${tmp}2" includeemptydirs="true" failonerror="false" />
	</target>

	<target name="clobber" depends="clean,clobber-examples" description="Cleans up the directory tree and deletes generated files">
		<delete>
			<fileset dir="${src}">
				<include name="polyglot/parse/Grm.java" />
				<include name="polyglot/parse/sym.java" />
				<include name="polyglot/parse/Lexer_c.java" />
				<include name="polyglot/qq/Grm.java" />
				<include name="polyglot/qq/sym.java" />
				<include name="polyglot/qq/Lexer_c.java" />
				<include name="polyglot/qq/qq_ppg.cup" />
			</fileset>
		</delete>
		<delete>
			<fileset dir="${pth.src}">
				<include name="polyglot/pth/Grm.java" />
				<include name="polyglot/pth/sym.java" />
				<include name="polyglot/pth/Lexer_c.java" />
			</fileset>
		</delete>
		<delete>
			<fileset dir="${ppg.src}">
				<include name="ppg/parse/Parser.java" />
				<include name="ppg/parse/sym.java" />
				<include name="ppg/lex/Lexer.java" />
			</fileset>
		</delete>
	</target>

	<!-- compile the base compiler except for the quasiquoter and generated parser -->
        <target name="compile-base" depends="init,base-parser">
		<javac source="1.4" target="1.4" srcdir="${src}" destdir="${classes}" debug="on" includes="polyglot/**" excludes="polyglot/qq/**,polyglot/parse/Lexer_c.java,polyglot/parse/sym.java,polyglot/parse/Grm.java">
			<classpath refid="standard.classpath" />
		</javac>
	</target>

        <target name="compile-epl-base" depends="init">
          <javac source="1.4" target="1.4" srcdir="${src}" destdir="${classes}" debug="on" includes="polyglot/**"
            excludes="polyglot/ext/**,polyglot/qq/**,polyglot/parse/BaseParser.java,polyglot/parse/sym.java,polyglot/parse/Grm.java,polyglot/parse/Lexer_c.java,polyglot/frontend/JLExtensionInfo.java">
			<classpath refid="standard.classpath" />
		</javac>
	</target>

	<target name="cup" depends="init" description="Builds the extended CUP parser generator">
		<antcall target="cup-parser-using-jar">
			<param name="parser.dir" value="${cup.src}/java_cup" />
			<param name="cup.file" value="parser.cup" />
			<param name="parser.class" value="parser" />
			<param name="symbol.class" value="sym" />
		</antcall>
		<javac source="1.4" target="1.4" srcdir="${cup.src}" destdir="${cup.classes}" debug="on" includes="java_cup/**">
			<classpath refid="cup.jar.classpath" />
		</javac>

		<!-- install a jar file in the polyglot lib directory -->
		<jar jarfile="${lib}/java_cup.jar" basedir="${cup.classes}" />
	</target>

	<!-- Build a CUP parser based on parameters supplied to the target.
       @param parser.dir    The directory, relative to $basedir, in which
                            the CUP file is located.
       @param parser.class  The name to be passed to CUP with -parser.
       @param symbol.class  The name to be passed to CUP with -symbols.
       @param cup.file      The name of the CUP file.
   -->
	<target name="cup-parser" depends="cup,cup-parser-deps" unless="cup.parser.up-to-date">
		<java classname="java_cup.Main" fork="true" dir="${parser.dir}" failonerror="true">
			<classpath refid="standard.classpath" />
			<arg value="-max_actions" />
			<arg value="100" />
			<arg value="-parser" />
			<arg value="${parser.class}" />
			<arg value="-symbols" />
			<arg value="${symbol.class}" />
			<arg value="${cup.file}" />
		</java>
	</target>

	<!-- The following target builds a cup parser using the version of
       cup already sitting in the java_cup.jar file. This is needed to
       bootstrap the build of cup. -->
	<target name="cup-parser-using-jar" depends="cup-parser-deps" unless="cup.parser.up-to-date">
		<java classname="java_cup.Main" fork="true" dir="${parser.dir}" failonerror="true">
			<classpath refid="cup.jar.classpath" />
			<arg value="-parser" />
			<arg value="${parser.class}" />
			<arg value="-symbols" />
			<arg value="${symbol.class}" />
			<arg value="${cup.file}" />
		</java>
	</target>

	<!-- Set the property cup.parser.up-to-date if the parser is in fact
       up to date.  Called by the cup.parser.using.jar target.
   -->
	<target name="cup-parser-deps">
		<dependset>
			<srcfileset dir="${parser.dir}" includes="${cup.file}" />
			<targetfileset dir="${parser.dir}">
				<include name="${parser.class}.java" />
				<include name="${symbol.class}.java" />
			</targetfileset>
		</dependset>
		<condition property="cup-parser.up-to-date">
			<and>
				<available file="${parser.dir}/${parser.class}.java" />
				<available file="${parser.dir}/${symbol.class}.java" />
			</and>
		</condition>
	</target>

	<!-- Build a PPG parser based on parameters supplied to the target.
           @param parser.dir    The directory, relative to $basedir, in which
                                the PPG file is located.
           @param ppg.file      The name of the PPG file.
           @param cup.file      The name of the CUP file to output.
           @param parser.class  The name to be passed to CUP with -parser.
           @param symbol.class  The name to be passed to CUP with -symbols.
       -->
	<target name="ppg.parser" depends="ppg.parser.deps" unless="ppg.parser.up-to-date">
		<java classname="ppg.PPG" fork="true" failonerror="true">
			<classpath refid="standard.classpath" />
			<arg value="${parser.dir}/${ppg.file}" />
			<arg value="-o" />
			<arg value="${parser.dir}/${cup.file}" />
		</java>
		<antcall target="cup-parser" />
	</target>

	<!-- Set the property ppg.parser.up-to-date if the parser is in fact
           up to date.  Called by the ppg.parser target.
       -->
	<target name="ppg.parser.deps">
		<dependset>
			<srcfileset dir="${parser.dir}">
				<include name="${ppg.file}" />
				<include name="${base-parser}" />
			</srcfileset>
			<targetfileset dir="${parser.dir}">
				<include name="${cup.file}" />
				<include name="${parser.class}.java" />
				<include name="${symbol.class}.java" />
			</targetfileset>
		</dependset>
		<condition property="ppg.parser.up-to-date">
			<and>
				<available file="${parser.dir}/${cup.file}" />
				<available file="${parser.dir}/${parser.class}.java" />
				<available file="${parser.dir}/${symbol.class}.java" />
			</and>
		</condition>
	</target>

	<!-- Build a JFlex lexer based on parameters supplied to the target.
       @param lexer.dir     The directory, relative to $basedir, in which
                            the JFlex file is located.
       @param lexer.class   The name of the lexer as declared with %class
                            in the JFlex file.
       @param jflex.file    The name of the JFlex file.
      -->
	<target name="jflex-lexer" depends="jflex-lexer-deps" unless="jflex.lexer.up-to-date">
		<java classname="JFlex.Main" fork="true" dir="${lexer.dir}" failonerror="true">
			<classpath refid="standard.classpath" />
			<arg value="${jflex.file}" />
		</java>
	</target>

	<!-- Set the property jflex.lexer.up-to-date if the lexer is in fact
       up to date.  Called by the jflex.lexer target.
   -->
	<target name="jflex-lexer-deps">
		<dependset>
			<srcfileset dir="${lexer.dir}" includes="${jflex.file}" />
			<targetfileset dir="${lexer.dir}" includes="${lexer.class}.java" />
		</dependset>
		<available property="jflex-lexer.up-to-date" file="${lexer.dir}/${lexer.class}.java" />
	</target>

	<!-- Builds base compiler -->
	<target name="jl" depends="base-parser,base,base-qq" description="Build the base compiler"/>

        <target name="base-parser" depends="bin,cup,init" description="Build the base compiler parser">
		<antcall target="jflex-lexer">
			<param name="lexer.dir" value="${src}/polyglot/parse"/>
			<param name="lexer.class" value="Lexer_c"/>
			<param name="jflex.file" value="java.flex"/>
		</antcall>
		<antcall target="cup-parser">
			<param name="parser.dir" value="${src}/polyglot/parse"/>
			<param name="cup.file" value="java12.cup"/>
			<param name="parser.class" value="Grm"/>
			<param name="symbol.class" value="sym"/>
		</antcall>
		<copy file="${src}/polyglot/parse/java12.cup" todir="${classes}/polyglot/parse"/>
		<javac source="1.4" target="1.4" srcdir="${src}" destdir="${classes}" debug="on"
      includes="polyglot/parse/**">
			<classpath refid="standard.classpath"/>
		</javac>
	</target>

        <target name="base-qq" depends="bin,cup,init,ppg,base-parser,compile-base" description="Build the base compiler parser">
		<antcall target="jflex-lexer">
			<param name="lexer.dir" value="${src}/polyglot/qq"/>
			<param name="lexer.class" value="Lexer_c"/>
			<param name="jflex.file" value="qq.flex"/>
		</antcall>
		<antcall target="ppg.parser">
			<param name="parser.dir" value="${src}/polyglot/qq"/>
			<param name="ppg.file" value="qq.ppg"/>
			<param name="base-parser" value="${src}/polyglot/parse/java12.cup"/>
			<param name="cup.file" value="qq_ppg.cup"/>
			<param name="parser.class" value="Grm"/>
			<param name="symbol.class" value="sym"/>
		</antcall>
		<javac source="1.4" target="1.4" srcdir="${src}" destdir="${classes}" debug="on" includes="polyglot/qq/**">
			<classpath refid="standard.classpath" />
		</javac>
	</target>

	<target name="jar" description="Builds polyglot.jar" depends="jar-base"/>

	<target name="jar-base" depends="jl,ppg,configure-buildstring">
		<delete file="${lib}/polyglot.jar" failonerror="false"/>
		<delete file="${classes}/MANIFEST.MF" failonerror="false"/>

		<manifest file="${classes}/MANIFEST.MF">
			<attribute name="Built-By" value="${user.name}" />
			<attribute name="Main-Class" value="polyglot.main.Main" />

			<attribute name="Implementation-Version" value="${jl.version}" />
			<attribute name="Built-Date" value="${jl.version.build}" />
			<attribute name="Class-Path" value="java_cup.jar polyglot.jar ppg.jar" />
		</manifest>

		<jar destfile="${lib}/polyglot.jar" basedir="${classes}" manifest="${classes}/MANIFEST.MF" includes="polyglot/ast/**,polyglot/frontend/**,polyglot/lex/**,polyglot/main/**,polyglot/parse/**,polyglot/qq/**,polyglot/types/**,polyglot/util/**,polyglot/visit/**,ppg/**,polyglot/ext/param/**" />

		<delete file="${classes}/MANIFEST.MF" failonerror="false"/>
	</target>

	<target name="jar-epl-base" depends="jl,ppg,configure-buildstring">
		<delete file="${lib}/polyglot-epl.jar" failonerror="false"/>
		<delete file="${classes}/MANIFEST.MF" failonerror="false"/>

		<manifest file="${classes}/MANIFEST.MF">
			<attribute name="Built-By" value="${user.name}" />
			<attribute name="Main-Class" value="polyglot.main.Main" />

			<attribute name="Implementation-Version" value="${jl.version}" />
			<attribute name="Built-Date" value="${jl.version.build}" />
			<attribute name="Class-Path" value="java_cup.jar polyglot.jar ppg.jar" />
		</manifest>

                <jar destfile="${lib}/polyglot.jar" basedir="${classes}" manifest="${classes}/MANIFEST.MF" includes="polyglot/**/*.class"
                  excludes="polyglot/parse/Grm.class,polyglot/parse/CUP$Grm$actions.class,polyglot/parse/sym.class,polyglot/parse/Lexer_c.class,polyglot/qq/**,polyglot/ext/**,polyglot/frontend/JLExtensionInfo.class,polyglot/parse/BaseParser.class" />

		<delete file="${classes}/MANIFEST.MF" failonerror="false"/>
	</target>

	<target name="javadoc" description="Runs javadoc over the Polyglot source code" depends="jl">
		<javadoc sourcepath="${basedir}" destdir="doc/api" encoding="iso-8859-1">
			<packageset dir="${src}" defaultexcludes="yes">
				<include name="polyglot/**" />
				<exclude name="**/tests" />
				<exclude name="**/test" />
			</packageset>
			<packageset dir="${ppg.src}" defaultexcludes="yes">
				<include name="ppg/**" />
				<exclude name="**/tests" />
				<exclude name="**/test" />
			</packageset>
			<packageset dir="${pth.src}" defaultexcludes="yes">
				<include name="polyglot/pth/**" />
				<exclude name="**/tests" />
				<exclude name="**/test" />
			</packageset>
			<classpath refid="standard.classpath" />
		</javadoc>
	</target>

	<!-- compile pth (Polyglot Test Harness) -->
	<target name="compile-pth" depends="compile-base">
		<antcall target="jflex-lexer">
			<param name="lexer.dir" value="${pth.src}/polyglot/pth"/>
			<param name="lexer.class" value="Lexer_c"/>
			<param name="jflex.file" value="script.flex"/>
		</antcall>
		<antcall target="cup-parser">
			<param name="parser.dir" value="${pth.src}/polyglot/pth"/>
			<param name="parser.class" value="Grm"/>
			<param name="symbol.class" value="sym"/>
			<param name="cup.file" value="script.cup"/>
		</antcall>
		<javac source="1.4" target="1.4" srcdir="${pth.src}" destdir="${pth.classes}" debug="on"
      includes="polyglot/**">
			<classpath refid="standard.classpath"/>
		</javac>
	</target>

	<!-- create jar pth (Polyglot Test Harness) -->
	<target name="jar-pth" depends="compile-pth"
          description="Builds pth.jar">
		<jar jarfile="${lib}/pth.jar" basedir="${pth.classes}" includes="polyglot/pth/**"/>
	</target>

	<!-- create pth (Polyglot Test Harness) -->
	<target name="pth" depends="jar-pth" description="Builds the pth (Polyglot Test Harness) tool"/>

	<!-- compile ppg (Polyglot Parser Generator) -->
	<target name="compile-ppg" description="Build the Polyglot parser generator">
		<antcall target="jflex-lexer">
			<param name="lexer.dir" value="${ppg.src}/ppg/lex"/>
			<param name="lexer.class" value="Lexer"/>
			<param name="jflex.file" value="ppg.flex"/>
		</antcall>
		<antcall target="cup-parser">
			<param name="parser.dir" value="${ppg.src}/ppg/parse"/>
			<param name="parser.class" value="Parser"/>
			<param name="symbol.class" value="Constant"/>
			<param name="cup.file" value="ppg.cup"/>
		</antcall>
		<javac source="1.4" target="1.4" srcdir="${ppg.src}" destdir="${ppg.classes}" debug="on"
      includes="ppg/**">
			<classpath refid="standard.classpath"/>
		</javac>
	</target>

	<!-- create jar ppg (Polyglot Parser Generator) -->
	<target name="jar-ppg" depends="compile-ppg"
          description="Builds ppg.jar">
		<jar jarfile="${lib}/ppg.jar" basedir="${ppg.classes}" includes="ppg/**"/>
	</target>

	<!-- create ppg (Polyglot Parser Generator) -->
	<target name="ppg" depends="jar-ppg" description="Builds the ppg (Polyglot Parser Generator) tool"/>


	<!-- Distribution targets -->

	<!-- do a cvs checkout into a tmp directory and run ant task there -->
	<target name="sub-ant-cvs">
		<ant inheritAll="false" antfile="${tmp}/polyglot/build.xml" dir="${tmp}/polyglot" target="${sub-ant.target}" />
	</target>

	<!-- generate a source tarball from CVS to put up on the web page -->
	<target name="source-tarball-stable" depends="configure-buildstring">
		<antcall target="cvs-checkout"/>
		<antcall target="sub-ant-cvs">
			<param name="sub-ant.target" value="gen-version"/>
		</antcall>
		<antcall target="sub-ant-cvs">
			<param name="sub-ant.target" value="javadoc"/>
		</antcall>
		<antcall target="sub-ant-cvs">
			<param name="sub-ant.target" value="src.tar"/>
		</antcall>
		<move todir="${basedir}/polyglot-${jl.version}-src.tar.gz" file="${tmp}/polyglot-${jl.version}-src.tar.gz"/>
		<antcall target="rmdir-tmp"/>
	</target>

	<!--
	<target name="source-tarball-nightly" depends="configure-buildstring">
		<antcall target="cvs-checkout"/>
		<antcall target="sub-ant-cvs">
			<param name="sub-ant.target" value="gen-version"/>
		</antcall>
		<antcall target="sub-ant-cvs">
			<param name="sub-ant.target" value="src.tar" />
		</antcall>
		<move tofile="${basedir}/polyglot-latest-src.tar.gz" file="${tmp}/polyglot-${jl.version}-src.tar.gz"/>
		<antcall target="rmdir-tmp"/>
	</target>

	<target name="source-tarball-epl-stable" depends="configure-buildstring">
		<antcall target="cvs-checkout"/>
		<antcall target="sub-ant-cvs">
			<param name="sub-ant.target" value="gen-version"/>
		</antcall>
		<antcall target="sub-ant-cvs">
			<param name="sub-ant.target" value="src-epl.tar" />
		</antcall>
		<move tofile="${basedir}/polyglot-${jl.version}-src.tar.gz" file="${tmp}/polyglot-${jl.version}-src.tar.gz"/>
		<antcall target="rmdir-tmp"/>
	</target>

	<target name="source-tarball-epl-nightly" depends="configure-buildstring">
		<antcall target="cvs-checkout"/>
		<antcall target="sub-ant-cvs">
			<param name="sub-ant.target" value="gen-version"/>
		</antcall>
		<antcall target="sub-ant-cvs">
			<param name="sub-ant.target" value="src-epl.tar" />
		</antcall>
		<move tofile="${basedir}/polyglot-latest-epl-src.tar.gz" file="${tmp}/polyglot-${jl.version}-src.tar.gz"/>
		<antcall target="rmdir-tmp"/>
	</target>
	-->

	<!-- generate an EPL jar file from CVS to put on the web page -->
	<target name="binary-jar-epl-stable" depends="configure-buildstring">
		<antcall target="cvs-checkout"/>
		<antcall target="sub-ant-cvs">
			<param name="sub-ant.target" value="gen-version"/>
		</antcall>
		<antcall target="sub-ant-cvs">
			<param name="sub-ant.target" value="bin-epl.jar" />
		</antcall>
		<move tofile="${basedir}/polyglot2_${jl.version}.jar" file="${tmp}/polyglot2_latest.jar"/>
		<antcall target="rmdir-tmp"/>
	</target>

	<!-- generate a nightly EPL jar file from CVS to put on the web page -->
	<target name="binary-jar-epl-nightly" depends="configure-buildstring">
		<antcall target="cvs-checkout"/>
		<antcall target="sub-ant-cvs">
			<param name="sub-ant.target" value="gen-version"/>
		</antcall>
		<antcall target="sub-ant-cvs">
			<param name="sub-ant.target" value="bin-epl.jar" />
		</antcall>
		<move tofile="${basedir}/polyglot2_latest.jar" file="${tmp}/polyglot2_latest.jar"/>
		<antcall target="rmdir-tmp"/>
	</target>

	<!-- generate an EPL source jar from CVS to pair with the binary jar generated via binary-jar-epl-stable -->
	<target name="source-jar-epl-stable" depends="configure-buildstring">
		<antcall target="cvs-checkout"/>
		<antcall target="sub-ant-cvs">
			<param name="sub-ant.target" value="gen-version"/>
		</antcall>
		<antcall target="sub-ant-cvs">
			<param name="sub-ant.target" value="src-epl.jar" />
		</antcall>
		<move tofile="${basedir}/polyglot2_src_${jl.version}.jar" file="${tmp}/polyglot/polygot2_src_latest.jar"/>
		<antcall target="rmdir-tmp"/>
	</target>

	<!-- generate an EPL source jar from CVS to pair with the binary jar generated via binary-jar-epl-nightly -->
	<target name="source-jar-epl-nightly" depends="configure-buildstring">
		<antcall target="cvs-checkout"/>
		<antcall target="sub-ant-cvs">
			<param name="sub-ant.target" value="gen-version"/>
		</antcall>
		<antcall target="sub-ant-cvs">
			<param name="sub-ant.target" value="src-epl.jar" />
		</antcall>
		<move tofile="${basedir}/polyglot2_src_latest.jar" file="${tmp}/polyglot/polyglot2_src_latest.jar"/>
		<antcall target="rmdir-tmp"/>
	</target>

	<!-- generate an EPL source jar from CVS to pair with the binary jar generated via binary-jar-epl-nightly -->
	<target name="eclipse-update-stable" depends="configure-buildstring">
		<antcall target="cvs-checkout"/>
		<antcall target="sub-ant-cvs">
			<param name="sub-ant.target" value="gen-version"/>
		</antcall>
		<antcall target="sub-ant-cvs">
			<param name="sub-ant.target" value="eclipse-update-dist" />
		</antcall>
		<move tofile="${basedir}/polyglot2_src_latest.jar" file="${tmp}/polyglot/polyglot2_src_latest.jar"/>
		<antcall target="rmdir-tmp"/>
	</target>

	<!--
	<target name="src.jar" depends="compile-base">
		<jar destfile="${basedir}/polyglot2_src.jar" basedir="${basedir}" includes="${src}/**/*.java"/>
	</target>
	-->

	<!-- make the LGPL source distribution and install into dist -->
	<target name="src-epl.jar" depends="compile-base">
		<jar destfile="${basedir}/polyglot2_src_latest.jar" basedir="${basedir}" includes="src/**/*.java"
                  excludes="src/polyglot/qq/**,src/polyglot/ext/**,src/polyglot/parse/BaseParser.java,src/polyglot/parse/sym.java,src/polyglot/parse/Grm.java,src/polyglot/parse/Lexer_c.java,src/polyglot/frontend/JLExtensionInfo.java"/>
	</target>

	<!-- make the LGPL source distribution and install into dist -->
	<target name="src.tar" depends="configure-buildstring,src-dist-tmp">
		<antcall target="rmdir">
			<param name="dir" value="${basedir}/polyglot-${jl.version}-src"/>
		</antcall>
		<!-- <ant inheritall="false" antfile="${tmp}/build.xml" target="javadoc"/> -->
		<move tofile="${basedir}/polyglot-${jl.version}-src" file="${tmp}"/>
		<tar destfile="${basedir}/polyglot-${jl.version}-src.tar.gz" basedir="${basedir}/polyglot-${jl.version}-src" compression="gzip"/>
	</target>

	<target name="src-epl.tar" depends="configure-buildstring,src-dist-epl-tmp">
		<antcall target="rmdir">
			<param name="dir" value="${basedir}/polyglot-${jl.version}-epl-src" />
		</antcall>
		<move tofile="${basedir}/polyglot-${jl.version}-epl-src" file="${tmp}"/>
		<tar destfile="${basedir}/polyglot-${jl.version}-epl-src.tar.gz" basedir="${basedir}/polyglot-${jl.version}-epl-src" compression="gzip"/>
	</target>

	<!-- make the LGPL source distribution in a tmp directory -->
	<target name="src-dist-tmp" depends="jar-base,jar-pth,jar-ppg,mkdir-tmp">
		<copy todir="${tmp}/src" includeemptydirs="false">
			<fileset dir="${src}" includes="polyglot/**/*.java,polyglot/qq/qq.ppg,polyglot/qq/qq.flex,polyglot/qq/qq_ppg.cup,polyglot/parse/java12.cup,polyglot/parse/java.flex,polyglot/**/package.html" />
		</copy>

		<copy todir="${tmp}/skel" includeEmptyDirs="false">
			<fileset dir="${basedir}/skel" />
		</copy>

		<copy todir="${tmp}/tools" includeEmptyDirs="false">
			<fileset dir="${basedir}/tools" includes="pth/**,ppg/**,java_cup/**" excludes="**/classes,**/Makefile,**/tests/**/*.java,**/tests/**/*.class,**/tests/**/*.results" />
		</copy>

		<copy todir="${tmp}/doc/api" includeEmptyDirs="false">
			<fileset dir="${basedir}/doc/api"/>
		</copy>

		<copy todir="${tmp}/tests" includeEmptyDirs="false">
			<fileset dir="tests" excludes="**/pthOutput*,**/*.java,**/*.java,**/*.results" />
		</copy>

		<copy todir="${tmp}/examples" includeEmptyDirs="true">
			<fileset dir="${examples.dir}" includes="pao,coffer"/>
		</copy>

		<copy file="${bin}/jlc" todir="${tmp}/bin" />
		<copy file="${bin}/pth" todir="${tmp}/bin" />
		<copy file="doc/Upgrade.txt" todir="${tmp}/doc" />
		<copy file="doc/Overview.txt" todir="${tmp}/doc" />
		<copy file="doc/ppg.html" todir="${tmp}/doc" />
		<!--
		<copy file="${lib}/polyglot.jar" todir="${tmp}/lib" />
		<copy file="${lib}/pth.jar" todir="${tmp}/lib" />
		<copy file="${lib}/ppg.jar" todir="${tmp}/lib" />
		<copy file="${lib}/java_cup.jar" todir="${tmp}/lib" />
		-->
		<copy file="${lib}/JFlex.jar" todir="${tmp}/lib" />
		<copy file="build.xml" todir="${tmp}" />
		<copy file="build.properties" todir="${tmp}" />
		<copy file="README" todir="${tmp}" />
		<copy file="CHANGES" todir="${tmp}" />
		<copy file="LICENSE" todir="${tmp}" />
		<copy file="LICENSE.LGPL" todir="${tmp}" />
		<copy file="LICENSE.Eclipse" todir="${tmp}" />

		<!-- these don't seem to work on Windows -->
		<chmod perm="ug=rw,o=" dir="${tmp}" excludes="${bin}/jlc,${bin}/pth" verbose="true" />
		<chmod perm="ug=rwx,o=" dir="${tmp}" includes="${bin}/jlc,${bin}/pth" />
	</target>

	<!-- make the EPL source distribution in a tmp directory -->
	<target name="src-dist-epl-tmp" depends="jar-epl-base,mkdir-tmp">
		<copy todir="${tmp}/src" includeemptydirs="false">
			<fileset dir="${src}" includes="polyglot/**/*.java,polyglot/**/package.html"
                          excludes="polyglot/qq/**,polyglot/ext/**,polyglot/parse/BaseParser.java,polyglot/parse/sym.java,polyglot/parse/Grm.java,polyglot/parse/Lexer_c.java,polyglot/frontend/JLExtensionInfo.java"/>
		</copy>

		<copy file="${bin}/jlc" todir="${tmp}/bin" />
		<copy file="doc/Upgrade.txt" todir="${tmp}/doc" />
		<copy file="doc/Overview.txt" todir="${tmp}/doc" />
		<copy file="${lib}/polyglot-epl.jar" todir="${tmp}/lib" />
		<copy file="build.xml" todir="${tmp}" />
		<copy file="build.properties" todir="${tmp}" />
		<copy file="README" todir="${tmp}" />
		<copy file="CHANGES" todir="${tmp}" />
		<copy file="LICENSE.Eclipse" todir="${tmp}" />

		<!-- these don't seem to work on Windows -->
		<chmod perm="ug=rw,o=" dir="${tmp}" excludes="${bin}/jlc" verbose="true" />
		<chmod perm="ug=rwx,o=" dir="${tmp}" includes="${bin}/jlc" />
	</target>

	<!-- build a combined source and binary jar file -->
	<target name="epl.jar" depends="compile-base,configure-buildstring,mkdir-tmp">
		<copy todir="${tmp}">
                  <fileset dir="${basedir}/classes" includes="**/*.class" excludes="polyglot/parse/Grm.class,polyglot/parse/CUP$Grm$actions.class,polyglot/parse/sym.class,polyglot/parse/Lexer_c.class,polyglot/qq/**,polyglot/ext/**,polyglot/frontend/JLExtensionInfo.class,polyglot/parse/BaseParser.class" />
		</copy>

		<manifest file="${tmp}/MANIFEST.MF">
			<attribute name="Built-By" value="${user.name}" />
			<attribute name="Implementation-Version" value="${jl.version}" />
			<attribute name="Built-Date" value="${jl.version.build}" />
		</manifest>

		<copy todir="${tmp}/src">
                  <fileset dir="${basedir}/src" includes="**/*.java" excludes="polyglot/parse/BaseParser.java,polyglot/parse/sym.java,polyglot/parse/Grm.java,polyglot/parse/Lexer_c.java,polyglot/frontend/JLExtensionInfo.java,polyglot/qq/**,polyglot/ext/**" />
		</copy>

		<jar destfile="${basedir}/polyglot2_latest.jar" basedir="${tmp}" manifest="${tmp}/MANIFEST.MF" includes="src/**,polyglot/**" />

		<antcall target="rmdir-tmp" />
	</target>

	<target name="bin-epl.jar" depends="compile-base,configure-buildstring,mkdir-tmp">
		<copy todir="${tmp}">
                  <fileset dir="${basedir}/classes" includes="**/*.class" excludes="polyglot/parse/Grm.class,polyglot/parse/CUP$Grm$actions.class,polyglot/parse/sym.class,polyglot/parse/Lexer_c.class,polyglot/qq/**,polyglot/ext/**,polyglot/frontend/JLExtensionInfo.class,polyglot/parse/BaseParser.class" />
		</copy>

		<manifest file="${tmp}/MANIFEST.MF">
			<attribute name="Built-By" value="${user.name}" />
			<attribute name="Implementation-Version" value="${jl.version}" />
			<attribute name="Built-Date" value="${jl.version.build}" />
		</manifest>

		<antcall target="src-epl.jar"/>
		<copy tofile="${tmp}/src.jar" file="${basedir}/polyglot2_src_latest.jar"/>

		<jar destfile="${basedir}/polyglot2_latest.jar" basedir="${tmp}" manifest="${tmp}/MANIFEST.MF" includes="polyglot/**,src.jar" />

		<antcall target="rmdir-tmp" />
	</target>

	<!-- make the Eclipse update distribution and install into dist -->
	<target name="eclipse-update-dist" depends="mkdir-tmp">
                <mkdir dir="${basedir}/eclipseUpdates"/>
		<antcall target="build-features"/>
		<antcall target="build-site"/>
		<antcall target="build-plugin"/>
	</target>

	<target name="build-site" depends="configure-buildstring">
		<filter token="version" value="${jl.version}"/>
                <copy tofile="${basedir}/eclipseUpdates/site.xml" file="${basedir}/eclipse/site.xml.in" filtering="true"/>
	</target>

	<target name="build-plugin" depends="configure-buildstring">
          <mkdir dir="${basedir}/eclipseUpdates/plugins"/>

		<!-- create a directory with the jar contents -->
		<antcall target="mkdir-tmp"/>

		<copy todir="${tmp}">
			<fileset dir="${basedir}/classes"
        includes="**/*.class"
        excludes="polyglot/parse/Grm.class,polyglot/parse/CUP$Grm$actions.class,polyglot/parse/sym.class,polyglot/parse/Lexer_c.class,polyglot/qq/**,polyglot/ext/**,polyglot/frontend/JLExtensionInfo.class,polyglot/parse/BaseParser.class" />
		</copy>

                <mkdir dir="${tmp}/META-INF"/>
		<filter token="version" value="${jl.version}"/>
                <copy tofile="${tmp}/META-INF/MANIFEST.MF" filtering="true">
                    <fileset file="${basedir}/META-INF/MANIFEST.MF.in"/>
		</copy>

                <jar destfile="${basedir}/eclipseUpdates/plugins/polyglot2_${jl.version}.jar"
      basedir="${tmp}"
      manifest="${tmp}/META-INF/MANIFEST.MF"/>

		<antcall target="rmdir-tmp"/>
	</target>

	<target name="build-features" depends="configure-buildstring">
		<filter token="version" value="${jl.version}"/>
		<copy tofile="${basedir}/eclipseUpdates/feature.xml" file="${basedir}/eclipse/feature.xml.in" filtering="true"/>

                <mkdir dir="${basedir}/eclipseUpdates/features"/>

                <jar destfile="${basedir}/eclipseUpdates/features/polyglot2_${jl.version}.jar"
      basedir="${basedir}/eclipse"
      includes="feature.xml" />
	</target>

	<target name="mkdir-tmp">
		<antcall target="rmdir-tmp"/>
		<mkdir dir="${tmp}" />
	</target>

	<target name="rmdir">
		<delete failonerror="false" includeemptydirs="true"  dir="${dir}" />
	</target>

	<target name="rmdir-tmp">
		<antcall target="rmdir">
			<param name="dir" value="${tmp}" />
		</antcall>
	</target>

	<property name="cvs.root" value=":pserver:anonymous@gforge.cis.cornell.edu:/cvsroot/polyglot" />

	<target name="cvs-checkout" depends="mkdir-tmp">
		<cvs command="checkout polyglot" quiet="true" cvsRsh="ssh" cvsRoot="${cvs.root}" dest="${tmp}" failonerror="true" />
	</target>

	<target name="dist-checklist">
		<echo>Builds and runs</echo>
		<echo>Examples build and run</echo>
		<echo>Regression tests successful</echo>
		<echo>CHANGES file up-to-date</echo>
		<echo>Version bump</echo>
	</target>

        <target name="gen-version" depends="gen-version-java,gen-version-manifest"/>

        <target name="gen-version-manifest" depends="configure-buildstring">
		<filter token="version" value="${jl.version}"/>
                <copy tofile="META-INF/MANIFEST.MF" filtering="true">
                    <fileset file="${basedir}/META-INF/MANIFEST.MF.in"/>
		</copy>
        </target>

        <target name="gen-version-java" depends="configure-buildstring">
		<echo file="${basedir}/src/polyglot/frontend/JLVersion.java">/*
 * This file is part of the Polyglot extensible compiler framework.
 *
 * Copyright (c) 2000-2007 Polyglot project group, Cornell University
 * Copyright (c) 2006-2007 IBM Corporation
 */
package polyglot.frontend;

/**
 * Version information for the base compiler.
 */
public class JLVersion extends polyglot.main.Version {
    public String name() { return "jl"; }
    public int major() { return ${jl.version.major}; }
    public int minor() { return ${jl.version.minor}; }
    public int patch_level() { return ${jl.version.patch}; }
    public String toString() { return "${jl.version.build}"; }
}
</echo>
	</target>
</project>

