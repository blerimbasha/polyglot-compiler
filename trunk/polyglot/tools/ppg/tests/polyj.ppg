include "java12.cup"

override class_or_interface_type ::=
	ambiguous:a {: RESULT = a.toType(); :}
	;
	
drop { array_type ::= name dims; }
	
// 19.8) Classes
// 19.8.1) Class Declarations

extend class_declaration ::=
	modifiers_opt:a CLASS:n IDENTIFIER:b
	parameters:p where_opt:w
	super_opt:c interfaces_opt:d class_body:e {:
		RESULT = parser.nf.PolyJClassDecl(parser.util.pos(n),
						a, b.getIdentifier(), p, w, c, d, e);
	:}
	;
	
extend class_member_declaration ::=	// List of ClassMember
	modifiers_opt:a CLASS:n IDENTIFIER:b parameters:p where_opt:w
	super_opt:c interfaces_opt:d class_body:e {:
		List l = new TypedList(new LinkedList(), ClassMember.class, false);
		l.add(parser.nf.PolyJClassDecl(parser.util.pos(n),
				a, b.getIdentifier(), p, w, c, d, e));
		RESULT = l;
	:}
	;
	
// 19.8.5) Constructor Declarations
	
extend explicit_constructor_invocation ::= // ConstructorCall
	primary_no_array:a DOT THIS:n LPAREN argument_list_opt:b RPAREN SEMICOLON {:
		RESULT = parser.nf.ThisCall(parser.util.pos(n), a, b);
	:}
|   primary_no_array:a DOT SUPER:n LPAREN argument_list_opt:b RPAREN SEMICOLON {:
		RESULT = parser.nf.SuperCall(parser.util.pos(n), a, b);
	:}
	;
	
drop {
	explicit_constructor_invocation ::=
		primary DOT THIS  LPAREN argument_list_opt RPAREN SEMICOLON
	|   primary DOT SUPER LPAREN argument_list_opt RPAREN SEMICOLON
	;
}
	
// 19.9) Interfaces
// PolyJ Extensions
	
parameters ::= // List of TypeNode
	LBRACK parameter_list:a RBRACK {:
		RESULT = a;
	:}
;
		
parameter_list ::= // List of TypeNode
	IDENTIFIER:a {:
		TypeNode t = parser.nf.AmbTypeNode(parser.util.pos(a), a.getIdentifier());
		List l = new TypedList(new LinkedList(), TypeNode.class, false);
		l.add(t);
		RESULT = l;
	:}
|	parameter_list:a COMMA IDENTIFIER:b {:
		TypeNode t = parser.nf.AmbTypeNode(parser.util.pos(b), b.getIdentifier());
		a.add(t);
		RESULT = a;
	:}
;
	
where_opt ::= // List of ClassConstraint
	where_list:a {:
		RESULT = a;
	:}
|	{:
		RESULT = new TypedList(new LinkedList(), ClassConstraint.class, false);
	:}
;
		
where_list ::= // List of ClassConstraint
	where:a {:
		List l = new TypedList(new LinkedList(), ClassConstraint.class, false);
		l.add(a);
		RESULT = l;
	:}
|	where_list:a where:b {:
		RESULT = a; a.add(b);
	:}
;
		
where ::= // ClassConstraint
	WHERE:n IDENTIFIER:a LBRACE where_decls:b RBRACE {:
		RESULT = parser.nf.ClassConstraint(parser.util.pos(n), a.getIdentifier(), b);
	:};
		
where_decls ::=		// List of ProcedureConstraint
	where_decls:a where_decl:b SEMICOLON {:
		RESULT = a; a.add(b);
	:}
|	{:
		RESULT = new TypedList(new LinkedList(), ProcedureConstraint.class, false);
	:};
		
where_decl ::=		// ProcedureConstraint
	method_sig:a {:
		RESULT = a;
	:}
|	constructor_sig:a {:
		RESULT = a;
	:};
	
formal_parameter_type_list_opt ::= 		// List of TypeNode
	formal_parameter_type_list:a {:
		RESULT = a;
	:}
|	{:
		RESULT = new TypedList(new LinkedList(), TypeNode.class, false);
	:};
		
formal_parameter_or_type ::=			// TypeNode
	type:a {:
		RESULT = a;
	:}
|	type:a variable_declarator_id:b {:	// ignore the name given to the parameter
		RESULT = a;
	:};
		
formal_parameter_type_list ::=			// List of Formal
	formal_parameter_or_type:a {:
		List l = new TypedList(new LinkedList(), TypeNode.class, false);
		l.add(a);
		RESULT = l;
	:}
|	formal_parameter_type_list:a COMMA formal_parameter_or_type:b {:
		RESULT = a; a.add(b);
	:};
			
method_sig ::=		// MethodConstraint
	type:b IDENTIFIER:c LPAREN 
	formal_parameter_type_list_opt:d RPAREN dims_opt:e throws_opt:f {:
		RESULT = parser.nf.MethodConstraint(parser.util.pos(b),
							Flags.NONE,
							parser.util.array(b, e.intValue()),
							c.getIdentifier(),
							d,
							f);
	:}
|	// MethodConstraint
	STATIC:a type:b IDENTIFIER:c LPAREN 
	formal_parameter_type_list_opt:d RPAREN dims_opt:e throws_opt:f {:
		RESULT = parser.nf.MethodConstraint(parser.util.pos(a),
							Flags.STATIC,
							parser.util.array(b, e.intValue()),
							c.getIdentifier(),
							d,
							f);
	:}
|	VOID:b IDENTIFIER:c LPAREN formal_parameter_type_list_opt:d RPAREN throws_opt:f {:
		RESULT = parser.nf.MethodConstraint(parser.util.pos(b),
							Flags.NONE,
							parser.nf.CanonicalTypeNode(parser.util.pos(c),
							parser.ts.Void()),
							c.getIdentifier(),
							d,
							f);
	:}
|	// MethodConstraint
	STATIC:a VOID:b IDENTIFIER:c LPAREN 
	formal_parameter_type_list_opt:d RPAREN throws_opt:f {:
		RESULT = parser.nf.MethodConstraint(parser.util.pos(a),
							Flags.STATIC,
							parser.nf.CanonicalTypeNode(parser.util.pos(b),
							parser.ts.Void()),
							c.getIdentifier(),
							d,
							f);
	:};

constructor_sig ::=			// ConstructorConstraint
	IDENTIFIER:a LPAREN formal_parameter_type_list_opt:b RPAREN throws_opt:c {:
		RESULT = parser.nf.ConstructorConstraint(parser.util.pos(a),
								Flags.NONE,
								a.getIdentifier(),
								b,
								c);
	:};
	
// 19.9.1) Interface Declarations
	
extend interface_declaration ::= 			// PolyJClassDecl
	modifiers_opt:a INTERFACE:n IDENTIFIER:b
	parameters:p where_opt:w
	extends_interfaces_opt:c interface_body:d {:
		a = a.setInterface();
		RESULT = parser.nf.PolyJClassDecl(parser.util.pos(n),
							a,
							b.getIdentifier(), p, w, null, c, d);
	:};
			
override statement_expression ::=
				// Expr
	assignment:a
		{: ((PolyJExt)a.ext()).setStmtExpr(); RESULT = a; :}
|	preincrement_expression:a
		{: ((PolyJExt)a.ext()).setStmtExpr(); RESULT = a; :}
|	predecrement_expression:a
		{: ((PolyJExt)a.ext()).setStmtExpr(); RESULT = a; :}
|	postincrement_expression:a
		{: ((PolyJExt)a.ext()).setStmtExpr(); RESULT = a; :}
|	postdecrement_expression:a
		{: ((PolyJExt)a.ext()).setStmtExpr(); RESULT = a; :}
|	method_invocation:a
		{: ((PolyJExt)a.ext()).setStmtExpr(); RESULT = a; :}
|	class_instance_creation_expression:a
		{: ((PolyJExt)a.ext()).setStmtExpr(); RESULT = a; :};
	
// 19.12) Expressions
    
primary_no_array ::=
	primary_no_new_array:a
		{: RESULT = a; :}
|	array_access:a
		{: RESULT = a; :};
	
extend primary_no_new_array ::=
				// Expr
	ambiguous:a DOT DEFAULT
		{: RESULT = parser.nf.Field(parser.util.pos(a), a.toType(), "default"); :}
|	ambiguous:a DOT CLASS
		{: RESULT = parser.nf.Field(parser.util.pos(a), a.toType(), "class"); :}
|	ambiguous:a DOT THIS
		{: RESULT = parser.nf.This(parser.util.pos(a), a.toType()); :};

drop {
	primary_no_new_array ::=
		array_access 
	|	name DOT CLASS
	|	name DOT THIS;
}
	
override class_instance_creation_expression ::=
				// Expr
	NEW:n simple_ambiguous:a LPAREN argument_list_opt:b RPAREN
		{: RESULT = parser.nf.New(parser.util.pos(n), a.toType(), b); :}
|	NEW:n simple_ambiguous:a LPAREN argument_list_opt:b RPAREN class_body:c
		{: TypeNode t = a.toType();
		   List l = new TypedList(new LinkedList(), TypeNode.class, false); 
		   l.add(t);
		   RESULT = parser.nf.New(parser.util.pos(n), t, b, c); :}
|	primary_no_array:a DOT NEW simple_instantiation_type:b
		LPAREN argument_list_opt:c RPAREN
		{: RESULT = parser.nf.QualifiedNew(parser.util.pos(a),
			a, b, c); :}
|	primary_no_array:a DOT NEW simple_instantiation_type:b
		LPAREN argument_list_opt:c RPAREN class_body:d
		{: List l = new TypedList(new LinkedList(), TypeNode.class, false); 
		   l.add(b);
		   RESULT = parser.nf.QualifiedNew(parser.util.pos(a),
			a, b, c, d); :}
|	ambiguous:a DOT NEW:n simple_instantiation_type:b
		LPAREN argument_list_opt:c RPAREN
		{: RESULT = parser.nf.QualifiedNew(parser.util.pos(n), a.toExpr(), b, c); :}
|	ambiguous:a DOT NEW:n simple_instantiation_type:b
		LPAREN argument_list_opt:c RPAREN class_body:d
		{: List l = new TypedList(new LinkedList(), TypeNode.class, false); 
		   l.add(b);
		   RESULT = parser.nf.QualifiedNew(parser.util.pos(n), a.toExpr(), b, c, d); :};
	
extend array_creation_expression ::=
				// Expr
	NEW:n simple_ambiguous:a dims_opt:b
		{: RESULT = a.toNewArray(parser.util.pos(n), b.intValue()); :}
|	NEW:n simple_ambiguous:a dims:b array_initializer:c
		{: RESULT = a.toNewArray(parser.util.pos(n), b.intValue(), c); :};
	
drop {
	array_creation_expression ::=
		NEW class_or_interface_type dim_exprs dims_opt
	|	NEW class_or_interface_type dims array_initializer;
}
	
extend field_access ::=
                    // Field
    /* FIXME: below should be primary ??? */
    primary_no_array:a DOT IDENTIFIER:b
        {: RESULT = parser.nf.Field(parser.util.pos(b), a,
                                b.getIdentifier()); :}
|	ambiguous:a DOT SUPER:n DOT IDENTIFIER:b {:
		RESULT = parser.nf.Field(parser.util.pos(a),
								parser.nf.Super(parser.util.pos(n), a.toClassType()),
								b.getIdentifier()); :};

drop {
	field_access ::=	
		primary DOT IDENTIFIER
    |   name DOT SUPER DOT IDENTIFIER;
}
	
extend method_invocation ::=
					// PolyJCall
		ambiguous:a LPAREN argument_list_opt:b RPAREN
			{: RESULT = a.toCall(b); :}
	|	primary_no_array:a DOT IDENTIFIER:b LPAREN argument_list_opt:c RPAREN
			{: RESULT = parser.nf.Call(parser.util.pos(b), a, b.getIdentifier(), c); :}
	|	ambiguous:a DOT SUPER:n DOT IDENTIFIER:b LPAREN argument_list_opt:c RPAREN
        	{: RESULT = parser.nf.Call(parser.util.pos(b),
            	parser.nf.Super(parser.util.pos(n), a.toType()),
            	b.getIdentifier(), c);
            :};
            
drop {
	method_invocation ::=
 		name LPAREN argument_list_opt RPAREN
    |   primary DOT IDENTIFIER LPAREN argument_list_opt RPAREN
	|	name DOT SUPER DOT IDENTIFIER LPAREN argument_list_opt RPAREN;
}

subscript_list ::=
	subscript:a
		{: List l = new TypedList(new LinkedList(), Sub.class, false);
		   l.add(a);
		   RESULT = l; :}
|	subscript_list:a COMMA subscript:b
		{: a.add(b); RESULT = a; :};
	
subscript ::=
	// subscript ::= type | expression, except that's ambiguous since
	//		expression =>* ambiguous and type =>* ambiguous.
	//		so we check to see if the expression is just a wrapped
	//		ambiguous, rather than allowing ambiguous in the production.
	//		(note type ::= ambiguous | primitive_type | array_type)
	expression:a
		{: Sub s;
		   if (a instanceof Wrapper) {
		       Wrapper w = (Wrapper) a;
		       Parse p = w.parse();
		       s = new AmbSub(parser, parser.util.pos(a), p);
	       } else {
		       s = new ExprSub(parser, parser.util.pos(a), a);
	       }
	       RESULT = s; :}
|	primitive_type:a
		{: RESULT = new TypeSub(parser, parser.util.pos(a), a); :}
|	array_type:a
		{: RESULT = new TypeSub(parser, parser.util.pos(a), a); :};
	
type_list ::=
	type:a
		{: List l = new TypedList(new LinkedList(), TypeNode.class, false); 
		   l.add(a.type());
		   RESULT = l; :}
|	type_list:a COMMA type:b
		{: RESULT = a; a.add(b.type()); :};
	
ambiguous ::=
	IDENTIFIER:a
			{: RESULT = new Name(parser, parser.util.pos(a), a.getIdentifier()); :}
|	ambiguous:a DOT IDENTIFIER:b
			{: RESULT = new Name(parser, parser.util.pos(b), a, b.getIdentifier()); :}
|	ambiguous:a LBRACK subscript_list:b RBRACK
			{: RESULT = a.append(b); :}
|	ambiguous:a LBRACK RBRACK
			{: RESULT = new Array(parser, parser.util.pos(a), a.toType()); :};
	
simple_ambiguous ::=
	IDENTIFIER:a
		{: RESULT = new Name(parser, parser.util.pos(a), a.getIdentifier()); :}
|	simple_ambiguous:a DOT IDENTIFIER:b
		{: RESULT = new Name(parser, parser.util.pos(b), a, b.getIdentifier()); :}
|	simple_ambiguous:a LBRACK subscript_list:b RBRACK
		{: RESULT = a.append(b); :};
	
simple_instantiation_type ::=
	IDENTIFIER:a
		{: RESULT = parser.nf.AmbTypeNode(parser.util.pos(a), a.getIdentifier()); :}
|	IDENTIFIER:a LBRACK type_list:b RBRACK
		{: RESULT = parser.nf.InstTypeNode(parser.util.pos(a), 
			 parser.nf.AmbTypeNode(parser.util.pos(a), a.getIdentifier()),
			 b); :};
	
override array_access ::=		// Expr
	primary_no_array:a dim_exprs:b {:
		Expr x = a;
		Iterator iter = b.iterator();
		while (iter.hasNext()) {
			Expr e = (Expr) iter.next();
			x = parser.nf.ArrayAccess(parser.util.pos(e), x, e);
		}
		RESULT = (ArrayAccess) x;
	:};
	
extend postfix_expression ::= 	// Expr
	ambiguous:a
			{: RESULT = a.wrap(); :};
drop { postfix_expression ::= name; }
	
drop {
	cast_expression ::=
		LPAREN name dims RPAREN unary_expression_not_plus_minus;
}
	
extend left_hand_side ::=	// Expr
		ambiguous:a
			{: RESULT = a.wrap(); :};
drop { left_hand_side ::= name; }
	
