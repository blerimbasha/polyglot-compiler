
//----------------------------------------------------
// The following code was generated by CUP v0.10j
// Thu Nov 15 23:44:01 EST 2001
//----------------------------------------------------

package jltools.util.jlgen.parse;

import java.io.*;
import java.util.*;
import java_cup.runtime.Symbol;
import jltools.util.jlgen.*;
import jltools.util.jlgen.atoms.*;
import jltools.util.jlgen.cmds.*;
import jltools.util.jlgen.code.*;
import jltools.util.jlgen.lex.*;
import jltools.util.jlgen.spec.*;

/** CUP v0.10j generated parser.
  * @version Thu Nov 15 23:44:01 EST 2001
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\132\000\002\002\004\000\002\017\003\000\002\017" +
    "\003\000\002\020\012\000\002\022\004\000\002\055\003" +
    "\000\002\055\002\000\002\023\004\000\002\023\002\000" +
    "\002\027\004\000\002\027\004\000\002\027\006\000\002" +
    "\027\005\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\026\010\000\002\026\007\000\002\031\004" +
    "\000\002\031\003\000\002\030\006\000\002\032\003\000" +
    "\002\033\003\000\002\025\005\000\002\025\003\000\002" +
    "\005\005\000\002\005\003\000\002\024\004\000\002\024" +
    "\003\000\002\004\004\000\002\004\003\000\002\035\004" +
    "\000\002\035\003\000\002\034\003\000\002\040\003\000" +
    "\002\040\003\000\002\012\004\000\002\012\003\000\002" +
    "\007\003\000\002\007\003\000\002\006\002\000\002\021" +
    "\011\000\002\041\005\000\002\041\003\000\002\052\004" +
    "\000\002\052\003\000\002\043\005\000\002\056\004\000" +
    "\002\056\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\010\006\000\002\013" +
    "\006\000\002\014\006\000\002\015\006\000\002\054\004" +
    "\000\002\054\003\000\002\064\005\000\002\064\004\000" +
    "\002\064\005\000\002\064\004\000\002\062\004\000\002" +
    "\063\004\000\002\053\005\000\002\053\003\000\002\051" +
    "\005\000\002\051\003\000\002\061\003\000\002\061\003" +
    "\000\002\060\004\000\002\060\003\000\002\016\006\000" +
    "\002\016\006\000\002\016\006\000\002\057\005\000\002" +
    "\057\003\000\002\036\003\000\002\037\003\000\002\045" +
    "\006\000\002\045\003\000\002\044\005\000\002\044\003" +
    "\000\002\042\005\000\002\042\003\000\002\046\003\000" +
    "\002\046\005\000\002\050\003\000\002\047\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\245\000\026\004\010\017\uffd9\020\uffd9\025\006\026" +
    "\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9\001\002" +
    "\000\004\002\247\001\002\000\022\017\uffd9\020\uffd9\026" +
    "\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9\001\002" +
    "\000\006\003\024\045\023\001\002\000\042\002\uffd6\006" +
    "\uffd6\007\uffd6\017\uffd6\020\uffd6\026\uffd6\030\uffd6\031\uffd6" +
    "\032\uffd6\033\uffd6\034\uffd6\036\uffd6\040\uffd6\045\uffd6\047" +
    "\uffd6\050\uffd6\001\002\000\004\044\234\001\002\000\004" +
    "\002\uffff\001\002\000\044\002\uffd9\006\uffd9\007\uffd9\017" +
    "\uffd9\020\uffd9\025\006\026\uffd9\030\uffd9\031\uffd9\032\uffd9" +
    "\033\uffd9\034\uffd9\036\uffd9\040\uffd9\045\uffd9\047\uffd9\050" +
    "\uffd9\001\002\000\004\002\000\001\002\000\042\002\uffd9" +
    "\006\uffd9\007\uffd9\017\uffd9\020\uffd9\026\uffd9\030\uffd9\031" +
    "\uffd9\032\uffd9\033\uffd9\034\uffd9\036\uffd9\040\uffd9\045\uffd9" +
    "\047\uffd9\050\uffd9\001\002\000\042\002\uffd9\006\uffd9\007" +
    "\uffd9\017\uffd9\020\uffd9\026\021\030\uffd9\031\uffd9\032\uffd9" +
    "\033\uffd9\034\uffd9\036\uffd9\040\uffd9\045\uffd9\047\uffd9\050" +
    "\uffd9\001\002\000\042\002\uffd4\006\uffd4\007\uffd4\017\uffd4" +
    "\020\uffd4\026\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4\034" +
    "\uffd4\036\uffd4\040\uffd4\045\uffd4\047\uffd4\050\uffd4\001\002" +
    "\000\042\002\uffd5\006\uffd5\007\uffd5\017\uffd5\020\uffd5\026" +
    "\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5\036\uffd5" +
    "\040\uffd5\045\uffd5\047\uffd5\050\uffd5\001\002\000\040\002" +
    "\ufffb\006\ufffb\007\ufffb\017\045\020\044\030\036\031\035" +
    "\032\037\033\050\034\051\036\ufffb\040\ufffb\045\ufffb\047" +
    "\ufffb\050\ufffb\001\002\000\006\003\024\045\023\001\002" +
    "\000\040\002\uffd1\006\uffd1\007\uffd1\017\uffd1\020\uffd1\030" +
    "\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1\036\uffd1\040\uffd1" +
    "\045\uffd1\047\uffd1\050\uffd1\001\002\000\022\011\uffdf\013" +
    "\uffdf\016\uffdf\021\uffdf\022\uffdf\023\uffdf\045\uffdf\046\uffdf" +
    "\001\002\000\022\011\uffde\013\uffde\016\uffde\021\uffde\022" +
    "\uffde\023\uffde\045\uffde\046\uffde\001\002\000\012\013\uffae" +
    "\022\uffae\023\uffae\045\uffae\001\002\000\006\013\uffac\022" +
    "\031\001\002\000\004\013\030\001\002\000\042\002\uffd3" +
    "\006\uffd3\007\uffd3\017\uffd3\020\uffd3\026\uffd3\030\uffd3\031" +
    "\uffd3\032\uffd3\033\uffd3\034\uffd3\036\uffd3\040\uffd3\045\uffd3" +
    "\047\uffd3\050\uffd3\001\002\000\010\003\024\037\032\045" +
    "\023\001\002\000\004\013\uffad\001\002\000\012\013\uffaf" +
    "\022\uffaf\023\uffaf\045\uffaf\001\002\000\040\002\uffd2\006" +
    "\uffd2\007\uffd2\017\uffd2\020\uffd2\030\uffd2\031\uffd2\032\uffd2" +
    "\033\uffd2\034\uffd2\036\uffd2\040\uffd2\045\uffd2\047\uffd2\050" +
    "\uffd2\001\002\000\004\027\231\001\002\000\004\027\226" +
    "\001\002\000\004\017\225\001\002\000\040\002\uffcf\006" +
    "\uffcf\007\uffcf\017\uffcf\020\uffcf\030\uffcf\031\uffcf\032\uffcf" +
    "\033\uffcf\034\uffcf\036\uffcf\040\uffcf\045\uffcf\047\uffcf\050" +
    "\uffcf\001\002\000\006\003\024\045\214\001\002\000\030" +
    "\002\uffc7\006\uffc7\007\uffc7\017\uffc7\020\uffc7\032\uffc7\036" +
    "\uffc7\040\uffc7\045\uffc7\047\uffc7\050\uffc7\001\002\000\040" +
    "\002\uffcd\006\uffcd\007\uffcd\017\uffcd\020\uffcd\030\uffcd\031" +
    "\uffcd\032\uffcd\033\uffcd\034\uffcd\036\uffcd\040\uffcd\045\uffcd" +
    "\047\uffcd\050\uffcd\001\002\000\006\003\uffdc\045\uffdc\001" +
    "\002\000\006\003\024\045\175\001\002\000\040\002\uffd0" +
    "\006\uffd0\007\uffd0\017\uffd0\020\uffd0\030\uffd0\031\uffd0\032" +
    "\uffd0\033\uffd0\034\uffd0\036\uffd0\040\uffd0\045\uffd0\047\uffd0" +
    "\050\uffd0\001\002\000\030\002\ufffc\006\ufffc\007\ufffc\017" +
    "\045\020\044\032\037\036\ufffc\040\ufffc\045\ufffc\047\ufffc" +
    "\050\ufffc\001\002\000\004\035\171\001\002\000\004\035" +
    "\164\001\002\000\022\002\uffd9\006\uffd9\007\uffd9\036\uffd9" +
    "\040\055\045\uffd9\047\uffd9\050\uffd9\001\002\000\040\002" +
    "\uffce\006\uffce\007\uffce\017\uffce\020\uffce\030\uffce\031\uffce" +
    "\032\uffce\033\uffce\034\uffce\036\uffce\040\uffce\045\uffce\047" +
    "\uffce\050\uffce\001\002\000\020\002\uffd9\006\uffd9\007\uffd9" +
    "\036\103\045\uffd9\047\uffd9\050\uffd9\001\002\000\010\041" +
    "\062\042\063\043\064\001\002\000\020\002\uffbb\006\uffbb" +
    "\007\uffbb\036\uffbb\045\uffbb\047\uffbb\050\uffbb\001\002\000" +
    "\022\002\uffbc\006\uffbc\007\uffbc\036\uffbc\040\055\045\uffbc" +
    "\047\uffbc\050\uffbc\001\002\000\022\002\uffb9\006\uffb9\007" +
    "\uffb9\036\uffb9\040\uffb9\045\uffb9\047\uffb9\050\uffb9\001\002" +
    "\000\022\002\uffba\006\uffba\007\uffba\036\uffba\040\uffba\045" +
    "\uffba\047\uffba\050\uffba\001\002\000\004\045\065\001\002" +
    "\000\004\045\065\001\002\000\004\045\065\001\002\000" +
    "\022\011\uffeb\012\uffeb\013\uffeb\014\uffeb\016\uffeb\021\uffeb" +
    "\045\uffeb\046\uffeb\001\002\000\012\011\uffb2\012\uffb2\013" +
    "\uffb2\016\uffb2\001\002\000\006\012\uffb3\013\uffb3\001\002" +
    "\000\006\012\uffb4\013\uffb4\001\002\000\006\012\072\013" +
    "\073\001\002\000\004\045\065\001\002\000\022\002\uffb6" +
    "\006\uffb6\007\uffb6\036\uffb6\040\uffb6\045\uffb6\047\uffb6\050" +
    "\uffb6\001\002\000\006\012\uffb5\013\uffb5\001\002\000\006" +
    "\012\072\013\076\001\002\000\022\002\uffb7\006\uffb7\007" +
    "\uffb7\036\uffb7\040\uffb7\045\uffb7\047\uffb7\050\uffb7\001\002" +
    "\000\006\012\072\013\100\001\002\000\022\002\uffb8\006" +
    "\uffb8\007\uffb8\036\uffb8\040\uffb8\045\uffb8\047\uffb8\050\uffb8" +
    "\001\002\000\016\002\ufff9\006\ufff9\007\ufff9\045\ufff9\047" +
    "\ufff9\050\ufff9\001\002\000\016\002\uffb0\006\uffb0\007\uffb0" +
    "\045\uffb0\047\uffb0\050\uffb0\001\002\000\004\035\104\001" +
    "\002\000\004\045\105\001\002\000\026\002\uffec\005\uffec" +
    "\006\uffec\007\uffec\010\uffec\013\uffec\015\uffec\045\uffec\047" +
    "\uffec\050\uffec\001\002\000\004\013\107\001\002\000\016" +
    "\002\uffb1\006\uffb1\007\uffb1\045\uffb1\047\uffb1\050\uffb1\001" +
    "\002\000\016\002\ufffe\006\114\007\115\045\uffd9\047\113" +
    "\050\111\001\002\000\004\045\ufff3\001\002\000\004\045" +
    "\ufff2\001\002\000\004\045\ufff4\001\002\000\006\010\160" +
    "\045\105\001\002\000\004\045\105\001\002\000\016\002" +
    "\ufffa\006\ufffa\007\ufffa\045\ufffa\047\ufffa\050\ufffa\001\002" +
    "\000\004\045\105\001\002\000\004\015\122\001\002\000" +
    "\016\002\ufff8\006\ufff8\007\ufff8\045\ufff8\047\ufff8\050\ufff8" +
    "\001\002\000\014\013\uffd9\016\uffd9\021\uffd9\045\uffd9\046" +
    "\uffd9\001\002\000\006\013\142\016\141\001\002\000\016" +
    "\011\uffe5\013\uffe5\016\uffe5\021\uffe5\045\uffe5\046\uffe5\001" +
    "\002\000\010\011\uffe9\013\uffe9\016\uffe9\001\002\000\016" +
    "\011\uffe7\013\uffe7\016\uffe7\021\131\045\065\046\127\001" +
    "\002\000\016\011\uffe3\013\uffe3\016\uffe3\021\uffe3\045\uffe3" +
    "\046\uffe3\001\002\000\020\011\uffd9\013\uffd9\014\134\016" +
    "\uffd9\021\uffd9\045\uffd9\046\uffd9\001\002\000\004\045\065" +
    "\001\002\000\016\011\uffe6\013\uffe6\016\uffe6\021\uffe6\045" +
    "\uffe6\046\uffe6\001\002\000\010\011\uffe8\013\uffe8\016\uffe8" +
    "\001\002\000\006\003\024\045\023\001\002\000\016\011" +
    "\uffe1\013\uffe1\016\uffe1\021\uffe1\045\uffe1\046\uffe1\001\002" +
    "\000\016\011\uffe4\013\uffe4\016\uffe4\021\uffe4\045\uffe4\046" +
    "\uffe4\001\002\000\016\011\uffe0\013\uffe0\016\uffe0\021\uffe0" +
    "\045\uffe0\046\uffe0\001\002\000\016\011\uffe2\013\uffe2\016" +
    "\uffe2\021\uffe2\045\uffe2\046\uffe2\001\002\000\016\011\uffd9" +
    "\013\uffd9\016\uffd9\021\uffd9\045\uffd9\046\uffd9\001\002\000" +
    "\020\002\uffed\006\uffed\007\uffed\011\uffed\045\uffed\047\uffed" +
    "\050\uffed\001\002\000\010\011\uffea\013\uffea\016\uffea\001" +
    "\002\000\004\005\145\001\002\000\004\045\105\001\002" +
    "\000\020\002\ufff5\005\147\006\ufff5\007\ufff5\045\ufff5\047" +
    "\ufff5\050\ufff5\001\002\000\004\045\105\001\002\000\004" +
    "\010\151\001\002\000\014\011\uffd9\016\uffd9\021\uffd9\045" +
    "\uffd9\046\uffd9\001\002\000\006\011\153\016\141\001\002" +
    "\000\020\002\ufff1\005\ufff1\006\ufff1\007\ufff1\045\ufff1\047" +
    "\ufff1\050\ufff1\001\002\000\004\010\155\001\002\000\014" +
    "\011\uffd9\016\uffd9\021\uffd9\045\uffd9\046\uffd9\001\002\000" +
    "\006\011\157\016\141\001\002\000\020\002\ufff0\005\ufff0" +
    "\006\ufff0\007\ufff0\045\ufff0\047\ufff0\050\ufff0\001\002\000" +
    "\004\045\105\001\002\000\016\002\ufff7\006\ufff7\007\ufff7" +
    "\045\ufff7\047\ufff7\050\ufff7\001\002\000\004\011\163\001" +
    "\002\000\016\002\ufff6\006\ufff6\007\ufff6\045\ufff6\047\ufff6" +
    "\050\ufff6\001\002\000\004\046\165\001\002\000\042\002" +
    "\uffd9\006\uffd9\007\uffd9\013\167\017\uffd9\020\uffd9\030\uffd9" +
    "\031\uffd9\032\uffd9\033\uffd9\034\uffd9\036\uffd9\040\uffd9\045" +
    "\uffd9\047\uffd9\050\uffd9\001\002\000\040\002\uffc9\006\uffc9" +
    "\007\uffc9\017\uffc9\020\uffc9\030\uffc9\031\uffc9\032\uffc9\033" +
    "\uffc9\034\uffc9\036\uffc9\040\uffc9\045\uffc9\047\uffc9\050\uffc9" +
    "\001\002\000\040\002\uffdb\006\uffdb\007\uffdb\017\uffdb\020" +
    "\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb\036\uffdb" +
    "\040\uffdb\045\uffdb\047\uffdb\050\uffdb\001\002\000\040\002" +
    "\uffda\006\uffda\007\uffda\017\uffda\020\uffda\030\uffda\031\uffda" +
    "\032\uffda\033\uffda\034\uffda\036\uffda\040\uffda\045\uffda\047" +
    "\uffda\050\uffda\001\002\000\004\046\172\001\002\000\042" +
    "\002\uffd9\006\uffd9\007\uffd9\013\167\017\uffd9\020\uffd9\030" +
    "\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9\036\uffd9\040\uffd9" +
    "\045\uffd9\047\uffd9\050\uffd9\001\002\000\040\002\uffca\006" +
    "\uffca\007\uffca\017\uffca\020\uffca\030\uffca\031\uffca\032\uffca" +
    "\033\uffca\034\uffca\036\uffca\040\uffca\045\uffca\047\uffca\050" +
    "\uffca\001\002\000\030\002\uffc8\006\uffc8\007\uffc8\017\uffc8" +
    "\020\uffc8\032\uffc8\036\uffc8\040\uffc8\045\uffc8\047\uffc8\050" +
    "\uffc8\001\002\000\014\012\uffa9\013\uffa9\022\uffdf\023\uffdf" +
    "\045\uffdf\001\002\000\010\022\212\023\uffab\045\uffab\001" +
    "\002\000\006\012\uffbf\013\uffbf\001\002\000\006\012\207" +
    "\013\210\001\002\000\030\002\uffc5\006\uffc5\007\uffc5\017" +
    "\uffc5\020\uffc5\032\uffc5\036\uffc5\040\uffc5\045\uffc5\047\uffc5" +
    "\050\uffc5\001\002\000\006\023\204\045\203\001\002\000" +
    "\006\012\uffa9\013\uffa9\001\002\000\004\024\206\001\002" +
    "\000\030\002\uffc6\006\uffc6\007\uffc6\017\uffc6\020\uffc6\032" +
    "\uffc6\036\uffc6\040\uffc6\045\uffc6\047\uffc6\050\uffc6\001\002" +
    "\000\006\023\uffaa\045\uffaa\001\002\000\004\045\203\001" +
    "\002\000\030\002\uffc2\006\uffc2\007\uffc2\017\uffc2\020\uffc2" +
    "\032\uffc2\036\uffc2\040\uffc2\045\uffc2\047\uffc2\050\uffc2\001" +
    "\002\000\006\012\uffc0\013\uffc0\001\002\000\006\003\024" +
    "\045\023\001\002\000\030\002\uffc3\006\uffc3\007\uffc3\017" +
    "\uffc3\020\uffc3\032\uffc3\036\uffc3\040\uffc3\045\uffc3\047\uffc3" +
    "\050\uffc3\001\002\000\014\012\uffa8\013\uffa8\022\uffdf\023" +
    "\uffdf\045\uffdf\001\002\000\006\012\222\013\223\001\002" +
    "\000\006\012\uffbd\013\uffbd\001\002\000\006\023\204\045" +
    "\221\001\002\000\030\002\uffc4\006\uffc4\007\uffc4\017\uffc4" +
    "\020\uffc4\032\uffc4\036\uffc4\040\uffc4\045\uffc4\047\uffc4\050" +
    "\uffc4\001\002\000\006\012\uffa8\013\uffa8\001\002\000\004" +
    "\045\221\001\002\000\030\002\uffc1\006\uffc1\007\uffc1\017" +
    "\uffc1\020\uffc1\032\uffc1\036\uffc1\040\uffc1\045\uffc1\047\uffc1" +
    "\050\uffc1\001\002\000\006\012\uffbe\013\uffbe\001\002\000" +
    "\006\003\uffdd\045\uffdd\001\002\000\004\046\227\001\002" +
    "\000\042\002\uffd9\006\uffd9\007\uffd9\013\167\017\uffd9\020" +
    "\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9\036\uffd9" +
    "\040\uffd9\045\uffd9\047\uffd9\050\uffd9\001\002\000\040\002" +
    "\uffcc\006\uffcc\007\uffcc\017\uffcc\020\uffcc\030\uffcc\031\uffcc" +
    "\032\uffcc\033\uffcc\034\uffcc\036\uffcc\040\uffcc\045\uffcc\047" +
    "\uffcc\050\uffcc\001\002\000\004\046\232\001\002\000\042" +
    "\002\uffd9\006\uffd9\007\uffd9\013\167\017\uffd9\020\uffd9\030" +
    "\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9\036\uffd9\040\uffd9" +
    "\045\uffd9\047\uffd9\050\uffd9\001\002\000\040\002\uffcb\006" +
    "\uffcb\007\uffcb\017\uffcb\020\uffcb\030\uffcb\031\uffcb\032\uffcb" +
    "\033\uffcb\034\uffcb\036\uffcb\040\uffcb\045\uffcb\047\uffcb\050" +
    "\uffcb\001\002\000\044\002\ufffd\006\ufffd\007\ufffd\017\ufffd" +
    "\020\ufffd\025\ufffd\026\ufffd\030\ufffd\031\ufffd\032\ufffd\033" +
    "\ufffd\034\ufffd\036\ufffd\040\ufffd\045\ufffd\047\ufffd\050\ufffd" +
    "\001\002\000\006\013\236\022\212\001\002\000\042\002" +
    "\uffd7\006\uffd7\007\uffd7\017\uffd7\020\uffd7\026\uffd7\030\uffd7" +
    "\031\uffd7\032\uffd7\033\uffd7\034\uffd7\036\uffd7\040\uffd7\045" +
    "\uffd7\047\uffd7\050\uffd7\001\002\000\022\017\uffd9\020\uffd9" +
    "\026\021\030\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9\001" +
    "\002\000\020\017\045\020\044\030\036\031\035\032\037" +
    "\033\050\034\051\001\002\000\016\017\045\020\044\032" +
    "\037\036\uffd9\040\055\045\uffd9\001\002\000\006\036\103" +
    "\045\uffd9\001\002\000\004\045\105\001\002\000\006\002" +
    "\uffd8\045\105\001\002\000\006\002\uffee\045\uffee\001\002" +
    "\000\006\002\uffef\045\uffef\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\245\000\016\006\006\017\003\020\012\021\010\022" +
    "\011\041\004\001\001\000\002\001\001\000\006\006\015" +
    "\052\236\001\001\000\006\040\024\044\234\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\006\006\041\013\001\001\000\002\001\001\000\006\006" +
    "\015\052\014\001\001\000\010\006\021\043\016\056\017" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\010" +
    "\045\011\033\012\040\013\037\014\052\015\042\054\046" +
    "\055\051\064\041\001\001\000\010\040\024\042\026\044" +
    "\025\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\040\032\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\040\024\044\175\046\216\047\215\051\214\063" +
    "\212\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\040\024\044\175\046\201\050\176\053" +
    "\177\062\200\001\001\000\002\001\001\000\006\012\040" +
    "\064\173\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\006\055\016\057\060\056\061\053\001\001\000\002" +
    "\001\001\000\006\006\101\045\100\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\060\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\033\065\036\067\037" +
    "\066\057\076\001\001\000\012\033\065\036\067\037\066" +
    "\057\074\001\001\000\012\033\065\036\067\037\066\057" +
    "\070\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\033" +
    "\065\036\073\037\066\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\107\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\032\105\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\003\116\006\111\027\115\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\032\160\001\001" +
    "\000\004\032\143\001\001\000\002\001\001\000\006\030" +
    "\120\032\117\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\005\124\006\123\024\125\025\122\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\004\131\033\127\001\001\000\002\001\001\000\006\006" +
    "\134\035\135\001\001\000\006\033\065\037\132\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\034\137\040" +
    "\136\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\005\142\006\123\024" +
    "\125\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\026\145\001\001\000\004\032\153\001\001\000\002\001" +
    "\001\000\004\032\147\001\001\000\002\001\001\000\012" +
    "\005\124\006\123\024\125\025\151\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\005\124" +
    "\006\123\024\125\025\155\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\030\161\032\117\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\006\167\007\165\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\006\167\007\172\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\050\176" +
    "\053\177\062\204\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\050\210" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\040" +
    "\032\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\047\215\051\214\063" +
    "\217\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\047\223\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\006\167\007\227" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\006" +
    "\167\007\232\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\006\021\043" +
    "\016\056\237\001\001\000\022\010\045\011\033\012\040" +
    "\013\037\014\052\015\042\054\240\064\041\001\001\000" +
    "\016\006\055\012\040\016\057\060\056\061\241\064\173" +
    "\001\001\000\006\006\101\045\242\001\001\000\010\030" +
    "\244\031\243\032\117\001\001\000\006\030\245\032\117" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 
    return lexer.getToken().getSymbol(); 

    }

 
    private Lexer lexer;           

    private static String filename; 
    public static String getFilename() { return filename; } 

    public Parser (String fname, Lexer lex) { 
        this(); 
        filename = fname; 
        lexer = lex;
    } 

    public void syntax_error (Symbol cur_token) { 
        Token tok = (Token) cur_token.value; 
        report_error ("Syntax error at line " + tok.getLineno() + 
                      ": \"" + tok.getValue() + "\" (" + tok.getID() + ")", 
                      null); 
        System.exit(1);
    } 

    public void report_fatal_error (String message, Object info) { 
        // stop parsing 
        done_parsing(); 

        // use the normal error message reporting to put out the message 
        report_error(message, info); 
        System.exit(1);
    } 

    private static Object program; 
    public static Object getProgramNode() { return program; } 
    public static void setProgramNode(Object n) { program = n; } 

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // new_non_term_id ::= ID 
            {
              String RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = (String) id.getValue(); 
              CUP$Parser$result = new java_cup.runtime.Symbol(37/*new_non_term_id*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // new_term_id ::= ID 
            {
              String RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = (String) id.getValue(); 
              CUP$Parser$result = new java_cup.runtime.Symbol(38/*new_term_id*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // type_id ::= type_id LBRACK RBRACK 
            {
              String RESULT = null;
		int t_idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int t_idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String t_id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = t_id + "[]"; 
              CUP$Parser$result = new java_cup.runtime.Symbol(36/*type_id*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // type_id ::= multipart_id 
            {
              String RESULT = null;
		int m_idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int m_idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String m_id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = m_id; 
              CUP$Parser$result = new java_cup.runtime.Symbol(36/*type_id*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // import_id ::= multipart_id 
            {
              String RESULT = null;
		int m_idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int m_idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String m_id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = m_id; 
              CUP$Parser$result = new java_cup.runtime.Symbol(32/*import_id*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // import_id ::= multipart_id DOT STAR 
            {
              String RESULT = null;
		int m_idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int m_idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String m_id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = m_id + ".*"; 
              CUP$Parser$result = new java_cup.runtime.Symbol(32/*import_id*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // multipart_id ::= robust_id 
            {
              String RESULT = null;
		int r_idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int r_idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String r_id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = r_id; 
              CUP$Parser$result = new java_cup.runtime.Symbol(34/*multipart_id*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // multipart_id ::= multipart_id DOT robust_id 
            {
              String RESULT = null;
		int m_idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int m_idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String m_id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int r_idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int r_idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String r_id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
		RESULT = m_id + "." + r_id;
	
              CUP$Parser$result = new java_cup.runtime.Symbol(34/*multipart_id*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // start_spec ::= empty 
            {
              String RESULT = null;
		 RESULT = null; 
              CUP$Parser$result = new java_cup.runtime.Symbol(35/*start_spec*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // start_spec ::= START WITH nt_id SEMI 
            {
              String RESULT = null;
		int start_nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String start_name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = start_name; 
              CUP$Parser$result = new java_cup.runtime.Symbol(35/*start_spec*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // term_id ::= symbol_id 
            {
              String RESULT = null;
		int symleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int symright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String sym = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = sym; 
              CUP$Parser$result = new java_cup.runtime.Symbol(29/*term_id*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // terminal_id ::= term_id 
            {
              String RESULT = null;
		int symleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int symright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String sym = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = sym; 
              CUP$Parser$result = new java_cup.runtime.Symbol(28/*terminal_id*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // terminal_list ::= terminal_id 
            {
              Vector RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
		Vector t_list = new Vector();
		t_list.addElement(t);
		RESULT = t_list;
	
              CUP$Parser$result = new java_cup.runtime.Symbol(45/*terminal_list*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // terminal_list ::= terminal_list COMMA terminal_id 
            {
              Vector RESULT = null;
		int t_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int t_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Vector t_list = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
		t_list.addElement(t);
		RESULT = t_list;
	
              CUP$Parser$result = new java_cup.runtime.Symbol(45/*terminal_list*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // preced ::= PRECEDENCE NONASSOC terminal_list SEMI 
            {
              Object RESULT = null;
		int t_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int t_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Vector t_list = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		RESULT = new Precedence(Precedence.NONASSOC, t_list);
	
              CUP$Parser$result = new java_cup.runtime.Symbol(12/*preced*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // preced ::= PRECEDENCE RIGHT terminal_list SEMI 
            {
              Object RESULT = null;
		int t_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int t_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Vector t_list = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		RESULT = new Precedence(Precedence.RIGHT, t_list);
	
              CUP$Parser$result = new java_cup.runtime.Symbol(12/*preced*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // preced ::= PRECEDENCE LEFT terminal_list SEMI 
            {
              Object RESULT = null;
		int t_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int t_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Vector t_list = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		RESULT = new Precedence(Precedence.LEFT, t_list);
	
              CUP$Parser$result = new java_cup.runtime.Symbol(12/*preced*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // precedence_l ::= preced 
            {
              Vector RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 
		Vector p_l = new Vector();
		p_l.addElement(p);
		RESULT = p_l;
	
              CUP$Parser$result = new java_cup.runtime.Symbol(46/*precedence_l*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // precedence_l ::= precedence_l preced 
            {
              Vector RESULT = null;
		int p_lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int p_lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Vector p_l = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
		p_l.addElement(p);
		RESULT = p_l;
	
              CUP$Parser$result = new java_cup.runtime.Symbol(46/*precedence_l*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // precedence_list ::= empty 
            {
              Vector RESULT = null;
		 RESULT = new Vector(); 
              CUP$Parser$result = new java_cup.runtime.Symbol(47/*precedence_list*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // precedence_list ::= precedence_l 
            {
              Vector RESULT = null;
		int p_lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int p_lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Vector p_l = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = p_l; 
              CUP$Parser$result = new java_cup.runtime.Symbol(47/*precedence_list*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // non_term_name_list ::= new_non_term_id 
            {
              Vector RESULT = null;
		int n_idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int n_idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String n_id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 
		Vector nnt_list = new Vector();
		nnt_list.addElement(n_id);
		RESULT = nnt_list; 
	
              CUP$Parser$result = new java_cup.runtime.Symbol(39/*non_term_name_list*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // non_term_name_list ::= non_term_name_list COMMA new_non_term_id 
            {
              Vector RESULT = null;
		int ntn_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ntn_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Vector ntn_list = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int n_idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int n_idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String n_id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
		ntn_list.addElement(n_id);
		RESULT = ntn_list;
	
              CUP$Parser$result = new java_cup.runtime.Symbol(39/*non_term_name_list*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // term_name_list ::= new_term_id 
            {
              Vector RESULT = null;
		int n_idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int n_idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String n_id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
		Vector tn_list = new Vector();
		tn_list.addElement(n_id);
		RESULT = tn_list;
	
              CUP$Parser$result = new java_cup.runtime.Symbol(41/*term_name_list*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // term_name_list ::= term_name_list COMMA new_term_id 
            {
              Vector RESULT = null;
		int tn_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tn_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Vector tn_list = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int n_idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int n_idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String n_id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
		tn_list.addElement(n_id);
		RESULT = tn_list;
	
              CUP$Parser$result = new java_cup.runtime.Symbol(41/*term_name_list*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // declares_non_term ::= non_term_name_list SEMI 
            {
              Vector RESULT = null;
		int ntn_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ntn_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Vector ntn_list = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = ntn_list; 
              CUP$Parser$result = new java_cup.runtime.Symbol(49/*declares_non_term*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // declares_term ::= term_name_list SEMI 
            {
              Vector RESULT = null;
		int tn_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tn_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Vector tn_list = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = tn_list; 
              CUP$Parser$result = new java_cup.runtime.Symbol(48/*declares_term*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // symbol ::= non_terminal declares_non_term 
            {
              SymbolList RESULT = null;
		int non_termleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int non_termright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Vector non_term = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
		RESULT = new SymbolList(SymbolList.NONTERMINAL, null, non_term);
	
              CUP$Parser$result = new java_cup.runtime.Symbol(50/*symbol*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // symbol ::= non_terminal type_id declares_non_term 
            {
              SymbolList RESULT = null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int non_termleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int non_termright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Vector non_term = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
		RESULT = new SymbolList(SymbolList.NONTERMINAL, type, non_term);
	
              CUP$Parser$result = new java_cup.runtime.Symbol(50/*symbol*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // symbol ::= TERMINAL declares_term 
            {
              SymbolList RESULT = null;
		int termleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int termright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Vector term = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
		RESULT = new SymbolList(SymbolList.TERMINAL, null, term);
	
              CUP$Parser$result = new java_cup.runtime.Symbol(50/*symbol*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // symbol ::= TERMINAL type_id declares_term 
            {
              SymbolList RESULT = null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int termleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int termright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Vector term = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
		RESULT = new SymbolList(SymbolList.TERMINAL, type, term);
	
              CUP$Parser$result = new java_cup.runtime.Symbol(50/*symbol*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // symbol_list ::= symbol 
            {
              Vector RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		SymbolList s = (SymbolList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 
		Vector s_list = new Vector();
		s_list.addElement(s);
		RESULT = s_list;
	
              CUP$Parser$result = new java_cup.runtime.Symbol(42/*symbol_list*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // symbol_list ::= symbol_list symbol 
            {
              Vector RESULT = null;
		int s_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int s_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Vector s_list = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		SymbolList s = (SymbolList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
		s_list.addElement(s);
		RESULT = s_list;
	
              CUP$Parser$result = new java_cup.runtime.Symbol(42/*symbol_list*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // scan_code ::= SCAN WITH CODE_STR opt_semi 
            {
              Object RESULT = null;
		int user_codeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int user_coderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token user_code = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ScanCode((String) user_code.getValue()); 
              CUP$Parser$result = new java_cup.runtime.Symbol(11/*scan_code*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // init_code ::= INIT WITH CODE_STR opt_semi 
            {
              Object RESULT = null;
		int user_codeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int user_coderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token user_code = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new InitCode((String) user_code.getValue()); 
              CUP$Parser$result = new java_cup.runtime.Symbol(10/*init_code*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // parser_code_part ::= PARSER CODE CODE_STR opt_semi 
            {
              Object RESULT = null;
		int user_codeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int user_coderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token user_code = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ParserCode((String) user_code.getValue()); 
              CUP$Parser$result = new java_cup.runtime.Symbol(9/*parser_code_part*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // action_code_part ::= ACTION CODE CODE_STR opt_semi 
            {
              Object RESULT = null;
		int user_codeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int user_coderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token user_code = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ActionCode((String) user_code.getValue()); 
              CUP$Parser$result = new java_cup.runtime.Symbol(6/*action_code_part*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // code_part ::= scan_code 
            {
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = s; 
              CUP$Parser$result = new java_cup.runtime.Symbol(7/*code_part*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // code_part ::= init_code 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = i; 
              CUP$Parser$result = new java_cup.runtime.Symbol(7/*code_part*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // code_part ::= parser_code_part 
            {
              Object RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = p; 
              CUP$Parser$result = new java_cup.runtime.Symbol(7/*code_part*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // code_part ::= action_code_part 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = a; 
              CUP$Parser$result = new java_cup.runtime.Symbol(7/*code_part*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // code_parts ::= empty 
            {
              Vector RESULT = null;
		 RESULT = new Vector(); 
              CUP$Parser$result = new java_cup.runtime.Symbol(44/*code_parts*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // code_parts ::= code_parts code_part 
            {
              Vector RESULT = null;
		int c_partsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int c_partsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Vector c_parts = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
		c_parts.addElement(c);
		RESULT = c_parts;
	
              CUP$Parser$result = new java_cup.runtime.Symbol(44/*code_parts*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // import_spec ::= IMPORT import_id SEMI 
            {
              String RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = i; 
              CUP$Parser$result = new java_cup.runtime.Symbol(33/*import_spec*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // import_list ::= empty 
            {
              Vector RESULT = null;
		 RESULT = new Vector(); 
              CUP$Parser$result = new java_cup.runtime.Symbol(40/*import_list*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // import_list ::= import_list import_spec 
            {
              Vector RESULT = null;
		int i_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int i_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Vector i_list = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
		i_list.addElement(i);
		RESULT = i_list;
	
              CUP$Parser$result = new java_cup.runtime.Symbol(40/*import_list*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // package_spec ::= empty 
            {
              String RESULT = null;
		 RESULT = null; 
              CUP$Parser$result = new java_cup.runtime.Symbol(31/*package_spec*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // package_spec ::= PACKAGE multipart_id SEMI 
            {
              String RESULT = null;
		int m_idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int m_idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String m_id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = m_id; 
              CUP$Parser$result = new java_cup.runtime.Symbol(31/*package_spec*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // cup_spec ::= package_spec import_list code_parts symbol_list precedence_list start_spec production_list 
            {
              Spec RESULT = null;
		int pkgleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int pkgright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String pkg = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int impleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int impright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Vector imp = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int codeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int coderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Vector code = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int sym_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sym_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Vector sym_list = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int prec_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int prec_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Vector prec_list = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int prod_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int prod_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Vector prod_list = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
				RESULT = new CUPSpec(pkg, imp, code, sym_list, prec_list, start, prod_list);	
              CUP$Parser$result = new java_cup.runtime.Symbol(15/*cup_spec*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // empty ::= 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(4/*empty*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // opt_semi ::= empty 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(5/*opt_semi*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // opt_semi ::= SEMI 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(5/*opt_semi*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // non_terminal ::= NONTERMINAL 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(8/*non_terminal*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // non_terminal ::= NON TERMINAL 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(8/*non_terminal*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // robust_id ::= error 
            {
              String RESULT = null;
		
		//lexer.emit_error("Illegal use of reserved word");
		RESULT="ILLEGAL";
	
              CUP$Parser$result = new java_cup.runtime.Symbol(30/*robust_id*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // robust_id ::= ID 
            {
              String RESULT = null;
		int the_idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int the_idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Token the_id = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = (String)the_id.getValue(); 
              CUP$Parser$result = new java_cup.runtime.Symbol(30/*robust_id*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // label_id ::= robust_id 
            {
              String RESULT = null;
		int the_idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int the_idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String the_id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = the_id; 
              CUP$Parser$result = new java_cup.runtime.Symbol(26/*label_id*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // opt_label ::= empty 
            {
              String RESULT = null;
		 RESULT = null; 
              CUP$Parser$result = new java_cup.runtime.Symbol(27/*opt_label*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // opt_label ::= COLON label_id 
            {
              String RESULT = null;
		int labidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int labidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String labid = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = labid; 
              CUP$Parser$result = new java_cup.runtime.Symbol(27/*opt_label*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // prod_part ::= CODE_STR 
            {
              Object RESULT = null;
		int code_strleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int code_strright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Token code_str = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
		RESULT = new SemanticAction((String)code_str.getValue());
	
              CUP$Parser$result = new java_cup.runtime.Symbol(2/*prod_part*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // prod_part ::= symbol_id opt_label 
            {
              Object RESULT = null;
		int symidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int symidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String symid = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int labidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int labidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String labid = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
		RESULT = new Nonterminal(symid, labid);
	
              CUP$Parser$result = new java_cup.runtime.Symbol(2/*prod_part*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // prod_part_list ::= empty 
            {
              Vector RESULT = null;
		 RESULT = new Vector(); 
              CUP$Parser$result = new java_cup.runtime.Symbol(18/*prod_part_list*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // prod_part_list ::= prod_part_list prod_part 
            {
              Vector RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Vector a = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 
		/* Vector a, (non)terminal/code b */
		a.addElement(b); RESULT = a;
	
              CUP$Parser$result = new java_cup.runtime.Symbol(18/*prod_part_list*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // rhs ::= prod_part_list 
            {
              Object RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Vector p = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = p; 
              CUP$Parser$result = new java_cup.runtime.Symbol(3/*rhs*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // rhs ::= prod_part_list PERCENT_PREC term_id 
            {
              Object RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Vector p = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int term_nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int term_nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String term_name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
		/* ???? */
	
              CUP$Parser$result = new java_cup.runtime.Symbol(3/*rhs*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // rhs_list ::= rhs 
            {
              Vector RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
		Vector r_list = new Vector();
		r_list.addElement(r);		RESULT = r_list;
	
              CUP$Parser$result = new java_cup.runtime.Symbol(19/*rhs_list*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // rhs_list ::= rhs_list BAR rhs 
            {
              Vector RESULT = null;
		int r_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int r_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Vector r_list = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
		r_list.addElement(r);		RESULT = r_list;
	
              CUP$Parser$result = new java_cup.runtime.Symbol(19/*rhs_list*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // symbol_id ::= ID 
            {
              String RESULT = null;
		int the_idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int the_idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Token the_id = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = (String)the_id.getValue(); 
              CUP$Parser$result = new java_cup.runtime.Symbol(25/*symbol_id*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // nt_id ::= ID 
            {
              String RESULT = null;
		int the_idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int the_idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Token the_id = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = (String)the_id.getValue(); 
              CUP$Parser$result = new java_cup.runtime.Symbol(24/*nt_id*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // production ::= nt_id COLON_COLON_EQUALS rhs_list SEMI 
            {
              Production RESULT = null;
		int lhs_idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lhs_idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String lhs_id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Vector rhs = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
		RESULT = new Production(new Nonterminal(lhs_id), rhs);
	
              CUP$Parser$result = new java_cup.runtime.Symbol(22/*production*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // production_list ::= production 
            {
              Vector RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Production p = (Production)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
				Vector p_list = new Vector();
		p_list.addElement(p);		RESULT = p_list;	
              CUP$Parser$result = new java_cup.runtime.Symbol(23/*production_list*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // production_list ::= production_list production 
            {
              Vector RESULT = null;
		int p_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int p_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Vector p_list = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Production p = (Production)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
				p_list.addElement(p);		RESULT = p_list;	
              CUP$Parser$result = new java_cup.runtime.Symbol(23/*production_list*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // transfer_list ::= TO nt_id LBRACE rhs_list RBRACE 
            {
              Vector RESULT = null;
		int ntleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int ntright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String nt = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Vector rhs = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
		Vector v = new Vector();
		Production p = new Production(new Nonterminal(nt), rhs);		v.addElement(p);		RESULT = v;
	
              CUP$Parser$result = new java_cup.runtime.Symbol(20/*transfer_list*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // transfer_list ::= transfer_list TO nt_id LBRACE rhs_list RBRACE 
            {
              Vector RESULT = null;
		int tlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Vector tl = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int ntleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int ntright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String nt = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rhsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rhsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Vector rhs = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
				Production p = new Production(new Nonterminal(nt), rhs);		tl.addElement(p);		RESULT = tl;
	
              CUP$Parser$result = new java_cup.runtime.Symbol(20/*transfer_list*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // prod_modifier_opt ::= empty 
            {
              Object RESULT = null;
		 RESULT = null; 
              CUP$Parser$result = new java_cup.runtime.Symbol(1/*prod_modifier_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // prod_modifier_opt ::= OVERRIDE 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = (String)a.getValue(); 
              CUP$Parser$result = new java_cup.runtime.Symbol(1/*prod_modifier_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // prod_modifier_opt ::= EXTEND 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = (String)a.getValue(); 
              CUP$Parser$result = new java_cup.runtime.Symbol(1/*prod_modifier_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // command ::= TRANSFER nt_id transfer_list 
            {
              Command RESULT = null;
		int ntleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ntright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String nt = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tlistleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int tlistright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Vector tlist = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
				RESULT = new TransferCmd(nt, tlist);	
              CUP$Parser$result = new java_cup.runtime.Symbol(21/*command*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // command ::= DROP LBRACE production RBRACE 
            {
              Command RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Production p = (Production)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new DropCmd(p); 
              CUP$Parser$result = new java_cup.runtime.Symbol(21/*command*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // command ::= DROP nt_id 
            {
              Command RESULT = null;
		int ntleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int ntright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String nt = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new DropCmd(nt); 
              CUP$Parser$result = new java_cup.runtime.Symbol(21/*command*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // command ::= prod_modifier_opt production 
            {
              Command RESULT = null;
		int modleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int modright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object mod = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Production p = (Production)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
				if (mod == null) {
			/* no modifier, new command */
			RESULT = new NewProdCmd(p);		} else if (mod.equals("extend")) {
			RESULT = new ExtendCmd(p);
		} else /* if (mod.equals("override")) */ {
			RESULT = new OverrideCmd(p);
		} 
	
              CUP$Parser$result = new java_cup.runtime.Symbol(21/*command*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // command_list_opt ::= 
            {
              Vector RESULT = null;
		 RESULT = new Vector(); 
              CUP$Parser$result = new java_cup.runtime.Symbol(17/*command_list_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // command_list_opt ::= command_list_opt command 
            {
              Vector RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Vector b = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Command a = (Command)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
		/* b = Vector, a = command; */
		b.addElement(a);
		RESULT = b;
	
              CUP$Parser$result = new java_cup.runtime.Symbol(17/*command_list_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // symbol_list_opt ::= 
            {
              Vector RESULT = null;
		 RESULT = null; 
              CUP$Parser$result = new java_cup.runtime.Symbol(43/*symbol_list_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // symbol_list_opt ::= symbol_list 
            {
              Vector RESULT = null;
		int sym_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int sym_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Vector sym_list = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = sym_list; 
              CUP$Parser$result = new java_cup.runtime.Symbol(43/*symbol_list_opt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // include_spec ::= INCLUDE STRING_CONST 
            {
              String RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
		RESULT = (String)a.getValue();
	
              CUP$Parser$result = new java_cup.runtime.Symbol(16/*include_spec*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // jlgen_spec ::= include_spec package_spec import_list code_parts symbol_list_opt precedence_list start_spec command_list_opt 
            {
              Spec RESULT = null;
		int incleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int incright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String inc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int pkgleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int pkgright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String pkg = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int impleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int impright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Vector imp = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int codeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int coderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Vector code = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int sym_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sym_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Vector sym_list = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int prec_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int prec_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Vector prec_list = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cmd_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int cmd_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Vector cmd_list = (Vector)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
		RESULT = new JLgenSpec(inc, pkg, imp, code, sym_list,								prec_list, start, cmd_list);
	
              CUP$Parser$result = new java_cup.runtime.Symbol(14/*jlgen_spec*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // spec ::= cup_spec 
            {
              Spec RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Spec s = (Spec)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
				Parser.setProgramNode(s);	
              CUP$Parser$result = new java_cup.runtime.Symbol(13/*spec*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // spec ::= jlgen_spec 
            {
              Spec RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Spec s = (Spec)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
				Parser.setProgramNode(s);	
              CUP$Parser$result = new java_cup.runtime.Symbol(13/*spec*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= spec EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Spec start_val = (Spec)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

