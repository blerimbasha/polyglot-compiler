Here are some of the assumptions carried by the components of JLTools.
Note that if an assumption needs to be violated (by an extension
language), we basically have 3 options, in increasing order of goodness:

     1) Modify the component in JLTools so that it no longer depends
        on that assumption.

     2) Write a completely new component for the extension language,
        to take the role of the JLTools component.

     3) Write a component for the extension language, implemented partially
        in terms of the JLTools component.

GENERAL ASSUMPTIONS:

* After parsing a single source file, we can determine which types that
  file defines without having to look in any other files.

* Java components are handled by the extended Java.  Specifically, all
  legacy Java classes will be valid types within the extended system.

PACKAGE jltools.types;
   - There is at most one TypeSystem in effect for a given compilation.
   - A class has at most one superclass.
   - Every Java class may be associated with a type.
   - An array may contain any type.
   - 

 LoadedJavaClass
   - Every class other than java.lang.Object has exactly one superclass.
   - Only inner classes may be anonymous.
   - Every class may be uniquely identified by a string.
   - Every anonymous class ends with $DIGIT*.

 JavaTypeSystem
   - The name of every non-anonymous inner class is composed of the
     name of its immediately outer class, followed by a $, and then by
     its declared name.

 TypeSystem
   - A context, a type, a method name, a this-boolean, and a
     list of argument types are sufficient to determine which method,
     if any, is being called.
   - A context, a type, and a field name are sufficient to
     tell which field, if any, is being accessed.
   - A context is sufficient to resolve types.
   
 
   
   
PACKAGE 