package jltools.ast;

public interface ExtensionFactory
{
    public Node getNewCaseStatementExtension();
    public Node getNewVariableDeclaratorExtension();
    public Node getNewSwitchBlockExtension();
    public Node getNewAmbiguousExpressionExtension();
    public Node getNewAmbiguousNameExtension();
    public Node getNewAmbiguousNameExpressionExtension();
    public Node getNewAmbiguousNodeExtension();
    public Node getNewArrayIndexExpressionExtension();
    public Node getNewArrayInitializerExpressionExtension();
    public Node getNewBinaryExpressionExtension();
    public Node getNewBlockStatementExtension();
    public Node getNewBooleanLiteralExtension();
    public Node getNewBranchStatementExtension();
    public Node getNewCastExpressionExtension();
    public Node getNewCatchBlockExtension();
    public Node getNewCharacterLiteralExtension();
    public Node getNewClassDeclarationStatementExtension();
    public Node getNewClassMemberExtension();
    public Node getNewClassNodeExtension();
    public Node getNewConstructorCallStatementExtension();
    public Node getNewDoStatementExtension();
    public Node getNewEmptyStatementExtension();
    public Node getNewExpressionExtension();
    public Node getNewExpressionStatementExtension();
    public Node getNewFieldExpressionExtension();
    public Node getNewFieldNodeExtension();
    public Node getNewFloatLiteralExtension();
    public Node getNewForStatementExtension();
    public Node getNewFormalParameterExtension();
    public Node getNewGlobalDeclarationExtension();
    public Node getNewIfStatementExtension();
    public Node getNewImportNodeExtension();
    public Node getNewInitializerBlockExtension();
    public Node getNewInstanceofExpressionExtension();
    public Node getNewIntLiteralExtension();
    public Node getNewLabelledStatementExtension();
    public Node getNewLiteralExtension();
    public Node getNewLocalVariableExpressionExtension();
    public Node getNewMethodExpressionExtension();
    public Node getNewMethodNodeExtension();
    public Node getNewNewArrayExpressionExtension();
    public Node getNewNewObjectExpressionExtension();
    public Node getNewNullLiteralExtension();
    public Node getNewNumericalLiteralExtension();
    public Node getNewReturnStatementExtension();
    public Node getNewSourceFileNodeExtension();
    public Node getNewSpecialExpressionExtension();
    public Node getNewStatementExtension();
    public Node getNewStringLiteralExtension();
    public Node getNewSwitchStatementExtension();
    public Node getNewSynchronizedStatementExtension();
    public Node getNewTernaryExpressionExtension();
    public Node getNewThrowStatementExtension();
    public Node getNewTryStatementExtension();
    public Node getNewTypeNodeExtension();
    public Node getNewUnaryExpressionExtension();
    public Node getNewVariableDeclarationStatementExtension();
    public Node getNewWhileStatementExtension();
}
